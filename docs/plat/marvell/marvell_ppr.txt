Post Package Repair (PPR) implementation
========================================

The purpose of this document is to describe the ATF's Post Package Repair (PPR).
The PPR driver supports Fail Row address repair for DDR5 based on
collected statistic.
For internal details about DDR5 PPR procedure refer to JESD79-5 4.29.
The Driver (EBF firmware) checks if PPR is needed in the reboot phase if new PPR records
available compared to the last reboot cycle. The records would keep in
PPR region periodically by ATF firmware driver
once in 30 days (PPR cycle) or urgent PPR if ECC Error per Row Counter (EpRC)
for some DRAM row reached MAX_EpRC_THRESHOLD (current value is 128).
The hPPR statistics are collected each MRR cycle periodically (period is 24 hours),
but data update happened as mentioned above urgent PPR or each PPR cycle end.

The decision about the repair is taken based on previously collected statistics.
The statistics are collected in non-volatile memory (spi flash) every 24 hours (MRR cycle)
for all modules, ranks, banks.
After 30 days the driver searches for the most frequently occurred Row for
each DRAM device. If DRAM device has available resources for PPR, driver
decides to perform Fail Row repairing.

The core of the PPR is Error Check and Scrub (ECS inernal DRAM) DDR5 mode with an
error counting scheme. EBF firmware enables ECS after training is done.
ECS is running at the background manual mode. The memory controller uCODE triggers ECS
execution periodically.

The ECS process collects statistics of a failing Row/BGx/BAx, Bank Address (BA)
and saves it at the Mode Registers Read (MRR) MR16-MR20 registers. Full error
scrub of the DRAM is performed every 24 hours.
For more details refer to JESD79-5 4.36.

ATF executes timer callback (24h) and collects statistics from ECS transparency
MR16-MR20 registers for all available Devices/BG/BA/Rows.
ATF saves MRR registers data as a `struct mrr` and EpRC:

struct record_t {
	uint32_t channel   : 5;  // Up to 31 channels
	uint32_t rank      : 1;  // Ranks 0/1
	uint32_t device    : 3;  // Up to 5 Devices currently
	uint32_t bank_gr   : 3;  // Up to 7 Bank Groups
	uint32_t bank_addr : 2;
	uint32_t row_num   : 18;
} __attribute__((packed));

and writes at non-volatile memory into dedicated MRR region.
After 30 days ATF scans the MRR region and count `struct mrr` and EpRC for
each Device/BG/BA/Row. That records and counters values should be written into
the non-volatile memory PPR region. PPR region records layout is `struct ppr`:

struct ppr {
	uint8_t cases;
	uint8_t EpRCacc;
	uint16_t cycle;
	union {
		uint32_t record;
		union record_t mrr;
	};
} __attribute__((packed));

PPR keep row record
record    - failed raw layout coming from MR16-MR20 registers
cases     - number of occurrences of Failed Row (BG,BA) in last PPR cycle (30 days)
EpRCacc   - total number of errors MR19 (accumulated in prr cycle)
            JEST79-5 (4.36.3 ECS Error Tracking) saturated to 0xFF
cycle     - counter for ECS periods

Records should be kept at a head (index head_ppr) of the PPR region.

Later, when there's a reboot, EBF detects that ppr region has valid
data for hPPR, then EBF scans the PPR region to fetch addresses of
failed rows, then it performs hardware PPR on those failed rows with
EpRCacc greater than EpRC_THRESHOLD (2).
For multiple failed row in same BA select one with maximum EpRCacc.

PPR on demand supported in case of EpRC exceeded error threshold value.
EBF can provide PPR procedure after threshold reached and not wait for 30 days.
Header update mrr_max_EpRC after each ECS cycle completed.
If mrr_max_EpRC reached threshold MAX_EpRC_THRESHOLD (128) value.
The origin of mrr_max_EpRC is Max Row Error Count REC[5:0]
Contains number of errors within the row with the most errors.
The make_statistics function prepare PPR region accordingly for EBF PPR procedure.
EpRC is not absolute errors number value. Each bit of EpRC correspond to
configurable range [0-256] by default refer to JESD79-5.


	Start of Flash PPR region
	+---------------+
	|SIGNATURE      |
	+---------------+
	|INDEX_MRR      |-------+
	+---------------+       |
	|INDEX_PPR      |---+   |
	+---------------+   |   |
	|MRR CYCLE      |   |   |
	+---------------+   |   |
	|PPR CYCLE      |   |   |
	+---------------+   |   |
	|max EpRC       |   |   |
	+---------------+   |   |
	|next ppr index |   |   |
	+---------------+   |   |
	                    |   |
	                    |   |
	                    |   |
	MRR REGION          |   |
	+---------------+   |   |
	| struct mrr    |<------+
	+---------------+   |
	|               |   |
	+---------------+   |
	|               |   |
	+---------------+   |
	|               |   |
	+---------------+   |
	                    |
	PPR REGION          |
	+---------------+   |
	| struct ppr    |<--+
	+---------------+
	|               |
	+---------------+
	|               |
	+---------------+

SIGNATURE - does the PPR flash region valid, if it does not match we
erase the PPR flash region and init from the beginning.

Header contains mrr/ppr index (starting from '0') of the last free record at
corresponding region.

Header saves a number of mrr/ppr cycles. The ppr cycle is share with EBF 'PPR CYCLE'.
'PPR CYCLE' increment every 30 days or on demand.
'MRR CYCLE' increment in daily basis.

Max EpRC keep counter for row with maximum errors in last MRR cycle

Next ppr index point on PPR region record index for next hPPR repair procedure to start from.

The further header can be extended to add communication with EBF and track PPR progress.

Example:
========

In the same BA rows 20,21,22 failed, if only one repair row exist
row 22 should be repaired because of maximum accumulated EpRC.

0d00h00m10.633120s: DRAM: [0 0 0 0 1 21] EpRCacc 15 cases 5 cycle 0 <- repaired
0d00h00m10.637732s: DRAM: [0 0 0 0 1 20] EpRCacc 7 cases 7 cycle 0
0d00h00m10.643358s: DRAM: [0 0 0 0 1 22] EpRCacc 32 cases 4 cycle 0
0d00h00m10.649088s: DRAM: [0 0 0 0 1 21] EpRCacc 18 cases 6 cycle 1
0d00h00m10.654807s: DRAM: [0 0 0 0 1 20] EpRCacc 7 cases 7 cycle 1
0d00h00m10.660443s: DRAM: [0 0 0 0 1 22] EpRCacc 32 cases 4 cycle 1
                                      ^
                                      |
                                      +----row number
                                   ^
                                   |
                                   +-------bank address number [0-3]
                                 ^
                                 |
                                 +---------bank group number [0-3]
                               ^
                               |
                               +-----------DRAM device number
                             ^
                             |
                             +-------------Rank number
                           ^
                           |
                           +---------------Channel number

EpRCacc 32 cases 4 cycle 0:
EpRCacc - Errors per Row Counter accumulator (MR19 register value)
       EpRCacc is 8 bit value accumulator for MR19 value in PPR cycle
       Saturated till 255, each time row failed during PPR cycle period
       EpRCacc accumulate additional value from MR19.

cases - Number of times row failed in current PPR cycle Id.

cycle - Id of PPR cycle, when row failed. Next PPR cycle Id sheduled by PPR timer
        or by EpRC value reached threshold.

<- repaired - mark repaired rows

PPR flash region keeps cycle 0 and cycle 1 records because
system alive 2 * PPR_cycle without reboot.
After reboot system execute hPPR (if enabled) and update PPR region
head pointer.

PPR on-demand:
==============

Select particular row for repair:
D) EBF_CONFIG_DDR5_PPR_CHANNEL  (0x0)  (0x0)  (0x0)
E) EBF_CONFIG_DDR5_PPR_RANK  (0x0)  (0x0)  (0x0)
F) EBF_CONFIG_DDR5_PPR_DEVICE  (0x0)  (0x0)  (0x0)
G) EBF_CONFIG_DDR5_PPR_BG  (0x0)  (0x0)  (0x0)
H) EBF_CONFIG_DDR5_PPR_BA  (0x0)  (0x0)  (0x0)
I) EBF_CONFIG_DDR5_PPR_ROW  (0x40000)  (0x40000)  (0x40000)

Row 0x40000 - disable PPR on-demand