/* c_device_lkm.h
 *
 * Configuration Handling for Driver Framework Device API implementation.
 * A build-level configuration file is included and sanity-checked.
 * Do not edit this file. Edit cs_hwpal_lkm.h instead.
 */

/*****************************************************************************
* Copyright (c) 2010-2021 by Rambus, Inc. and/or its subsidiaries.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*
* 1. Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright
* notice, this list of conditions and the following disclaimer in the
* documentation and/or other materials provided with the distribution.
*
* 3. Neither the name of the copyright holder nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*****************************************************************************/

/*----------------------------------------------------------------
 * get configuration settings from product config file
 */

/* Top-level Hardware platform configuration */
#include "cs_hwpal_lkm.h"


/* Enables strict argument checking for input parameters */
/*#define HWPAL_STRICT_ARGS_CHECK */

/* choose from LOG_SEVERITY_INFO, LOG_SEVERITY_WARN, LOG_SEVERITY_CRIT */
#ifndef LOG_SEVERITY_MAX
#define LOG_SEVERITY_MAX LOG_SEVERITY_INFO
#endif

#ifndef HWPAL_MAX_DEVICE_NAME_LENGTH
#error "HWPAL_MAX_DEVICE_NAME_LENGTH undefined"
#endif

#ifndef HWPAL_DEVICES
#error " HWPAL_DEVICES undefined"
#endif

/* Device driver name used for looking up the device and reporting */
#ifndef HWPAL_DRIVER_NAME
#define HWPAL_DRIVER_NAME "Security"
#endif

/*----------------------------------------------------------------
 * Other configuration parameters that can be set in a top level
 * configuration
 */

/* HWPAL_DEVICE_ID
 *
 * Device identification required for implementation of Device API
 */

/* HWPAL_VENDOR_ID
 *
 * Device vendor identification required for implementation of Device API
 */

/* HWPAL_DEVICE_RESOURCE_ID
 *
 * Device resource identification required for implementation of Device API
 */
#ifndef HWPAL_DEVICE_RESOURCE_ID
#define HWPAL_DEVICE_RESOURCE_ID        0
#endif

/* HWPAL_DEVICE_RESOURCE_BYTE_COUNT
 *
 * Device resource size (in bytes), if 0 then the resource maximum size will be
 * determined and used.
 *
 */
#ifndef HWPAL_DEVICE_RESOURCE_BYTE_COUNT
#define HWPAL_DEVICE_RESOURCE_BYTE_COUNT        0 /* Use the entire resource */
#endif

/* HWPAL_REMAP_ADDRESSES
 *
 * Macro that can be used to remap a device static resource offset
 * (a relative address) to another address
 *
 * Example:
 * #define HWPAL_REMAP_ADDRESSES     HWPAL_REMAP_ONE(0x71004, 0x71200);
 *
 */

/* HWPAL_DEVICE_MAGIC
 *
 * Optional magic number used to validate device administration data
 */

/* HWPAL_DEVICE_DIRECT_MEMIO
 *
 * Enable this parameter in order to use the direct memory I/O
 * operations bypassing the Linux kernel memory I/O API
 */

/* HWPAL_PLATFORM_IRQ_IDX
 *
 * Platform-specific index of the IRQ that will be used.
 *
 */
#ifndef HWPAL_PLATFORM_IRQ_IDX
#define HWPAL_PLATFORM_IRQ_IDX 0
#endif

/* HWPAL_USE_UMDEVXS_DEVICE
 *
 * Use external Linux kernel device data structure provided by the kernel
 * after instantiating the device driver in the kernel.
 *
 */
/*#define HWPAL_USE_UMDEVXS_DEVICE */

/* HWPAL_DEVICE_READ_DELAY_US
 *
 * Device_Read32() function will busy wait for the specified number
 * of microseconds before actually performing the read operation.
 *
 * Note: This is a workaround for posted-writes implementation of
 *       the MMIO register slave interface
 *       (when too fast write-read sequence does not work)
 *
 *
 */
/*#define HWPAL_DEVICE_READ_DELAY_US    100 */


/* HWPAL_DEVICE_USE_RPM
 *
 * Enables use of runtime power management
 */
/*#define HWPAL_DEVICE_USE_RPM */


/* end of file c_device_lkm.h */
