#ifndef __CAVM_CSRS_CST_CW_ROM_H__
#define __CAVM_CSRS_CST_CW_ROM_H__
/* This file is auto-generated. Do not edit */

/***********************license start***********************************
* Copyright (C) 2018 Marvell
* SPDX-License-Identifier: BSD-3-Clause
* https://spdx.org/licenses
***********************license end**************************************/


/**
 * @file
 *
 * Configuration and status register (CSR) address and type definitions for
 * OcteonTX CST_CW_ROM.
 *
 * This file is auto generated. Do not edit.
 *
 */

/**
 * Register (NCB32b) cst_cw#_rom_authstatus
 *
 * CST Cw Rom Authstatus Register
 * Reports the current status of the authentication control signals.
 */
union cavm_cst_cwx_rom_authstatus
{
    uint32_t u;
    struct cavm_cst_cwx_rom_authstatus_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_12_31        : 20;
        uint32_t hnid                  : 2;  /**< [ 11: 10](RO) Hypervisor non-invasive debug. */
        uint32_t hid                   : 2;  /**< [  9:  8](RO) Hypervisor invasive debug. */
        uint32_t snid                  : 2;  /**< [  7:  6](RO) Secure non-invasive debug. */
        uint32_t sid                   : 2;  /**< [  5:  4](RO) Secure invasive debug. */
        uint32_t nsnid                 : 2;  /**< [  3:  2](RO) Non-secure non-invasive debug. */
        uint32_t nsid                  : 2;  /**< [  1:  0](RO) Non-secure invasive debug. */
#else /* Word 0 - Little Endian */
        uint32_t nsid                  : 2;  /**< [  1:  0](RO) Non-secure invasive debug. */
        uint32_t nsnid                 : 2;  /**< [  3:  2](RO) Non-secure non-invasive debug. */
        uint32_t sid                   : 2;  /**< [  5:  4](RO) Secure invasive debug. */
        uint32_t snid                  : 2;  /**< [  7:  6](RO) Secure non-invasive debug. */
        uint32_t hid                   : 2;  /**< [  9:  8](RO) Hypervisor invasive debug. */
        uint32_t hnid                  : 2;  /**< [ 11: 10](RO) Hypervisor non-invasive debug. */
        uint32_t reserved_12_31        : 20;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_authstatus_s cn; */
};
typedef union cavm_cst_cwx_rom_authstatus cavm_cst_cwx_rom_authstatus_t;

static inline uint64_t CAVM_CST_CWX_ROM_AUTHSTATUS(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_AUTHSTATUS(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fb8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fb8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fb8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fb8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_AUTHSTATUS", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_AUTHSTATUS(a) cavm_cst_cwx_rom_authstatus_t
#define bustype_CAVM_CST_CWX_ROM_AUTHSTATUS(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_AUTHSTATUS(a) "CST_CWX_ROM_AUTHSTATUS"
#define busnum_CAVM_CST_CWX_ROM_AUTHSTATUS(a) (a)
#define arguments_CAVM_CST_CWX_ROM_AUTHSTATUS(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_cidr0
 *
 * CST Cw Rom Cidr0 Register
 * The CIDR0 register is part of the set of component identification registers.
 */
union cavm_cst_cwx_rom_cidr0
{
    uint32_t u;
    struct cavm_cst_cwx_rom_cidr0_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t prmbl_0               : 8;  /**< [  7:  0](RO) Preamble. Returns 0x0D. */
#else /* Word 0 - Little Endian */
        uint32_t prmbl_0               : 8;  /**< [  7:  0](RO) Preamble. Returns 0x0D. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_cidr0_s cn; */
};
typedef union cavm_cst_cwx_rom_cidr0 cavm_cst_cwx_rom_cidr0_t;

static inline uint64_t CAVM_CST_CWX_ROM_CIDR0(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_CIDR0(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000ff0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000ff0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000ff0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000ff0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_CIDR0", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_CIDR0(a) cavm_cst_cwx_rom_cidr0_t
#define bustype_CAVM_CST_CWX_ROM_CIDR0(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_CIDR0(a) "CST_CWX_ROM_CIDR0"
#define busnum_CAVM_CST_CWX_ROM_CIDR0(a) (a)
#define arguments_CAVM_CST_CWX_ROM_CIDR0(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_cidr1
 *
 * CST Cw Rom Cidr1 Register
 * The CIDR1 register is part of the set of component identification registers.
 */
union cavm_cst_cwx_rom_cidr1
{
    uint32_t u;
    struct cavm_cst_cwx_rom_cidr1_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t class_f               : 4;  /**< [  7:  4](RO) Component class. Returns 0x9, indicating this is a CoreSight component. */
        uint32_t prmbl_1               : 4;  /**< [  3:  0](RO) Preamble. Returns 0x0. */
#else /* Word 0 - Little Endian */
        uint32_t prmbl_1               : 4;  /**< [  3:  0](RO) Preamble. Returns 0x0. */
        uint32_t class_f               : 4;  /**< [  7:  4](RO) Component class. Returns 0x9, indicating this is a CoreSight component. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_cidr1_s cn; */
};
typedef union cavm_cst_cwx_rom_cidr1 cavm_cst_cwx_rom_cidr1_t;

static inline uint64_t CAVM_CST_CWX_ROM_CIDR1(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_CIDR1(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000ff4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000ff4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000ff4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000ff4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_CIDR1", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_CIDR1(a) cavm_cst_cwx_rom_cidr1_t
#define bustype_CAVM_CST_CWX_ROM_CIDR1(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_CIDR1(a) "CST_CWX_ROM_CIDR1"
#define busnum_CAVM_CST_CWX_ROM_CIDR1(a) (a)
#define arguments_CAVM_CST_CWX_ROM_CIDR1(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_cidr2
 *
 * CST Cw Rom Cidr2 Register
 * The CIDR2 register is part of the set of component identification registers.
 */
union cavm_cst_cwx_rom_cidr2
{
    uint32_t u;
    struct cavm_cst_cwx_rom_cidr2_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t prmbl_2               : 8;  /**< [  7:  0](RO) Preamble. Returns 0x05. */
#else /* Word 0 - Little Endian */
        uint32_t prmbl_2               : 8;  /**< [  7:  0](RO) Preamble. Returns 0x05. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_cidr2_s cn; */
};
typedef union cavm_cst_cwx_rom_cidr2 cavm_cst_cwx_rom_cidr2_t;

static inline uint64_t CAVM_CST_CWX_ROM_CIDR2(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_CIDR2(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000ff8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000ff8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000ff8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000ff8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_CIDR2", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_CIDR2(a) cavm_cst_cwx_rom_cidr2_t
#define bustype_CAVM_CST_CWX_ROM_CIDR2(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_CIDR2(a) "CST_CWX_ROM_CIDR2"
#define busnum_CAVM_CST_CWX_ROM_CIDR2(a) (a)
#define arguments_CAVM_CST_CWX_ROM_CIDR2(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_cidr3
 *
 * CST Cw Rom Cidr3 Register
 * The CIDR3 register is part of the set of component identification registers.
 */
union cavm_cst_cwx_rom_cidr3
{
    uint32_t u;
    struct cavm_cst_cwx_rom_cidr3_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t prmbl_3               : 8;  /**< [  7:  0](RO) Preamble. Returns 0xB1. */
#else /* Word 0 - Little Endian */
        uint32_t prmbl_3               : 8;  /**< [  7:  0](RO) Preamble. Returns 0xB1. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_cidr3_s cn; */
};
typedef union cavm_cst_cwx_rom_cidr3 cavm_cst_cwx_rom_cidr3_t;

static inline uint64_t CAVM_CST_CWX_ROM_CIDR3(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_CIDR3(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000ffcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000ffcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000ffcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000ffcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_CIDR3", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_CIDR3(a) cavm_cst_cwx_rom_cidr3_t
#define bustype_CAVM_CST_CWX_ROM_CIDR3(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_CIDR3(a) "CST_CWX_ROM_CIDR3"
#define busnum_CAVM_CST_CWX_ROM_CIDR3(a) (a)
#define arguments_CAVM_CST_CWX_ROM_CIDR3(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_devarch
 *
 * CST Cw Rom Devarch Register
 * Identifies the architect and architecture of a CoreSight component. The architect
 * might differ from the designer of a component, for example Arm defines the
 * architecture but another company designs and implements the component.
 */
union cavm_cst_cwx_rom_devarch
{
    uint32_t u;
    struct cavm_cst_cwx_rom_devarch_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t architect             : 11; /**< [ 31: 21](RO) Returns 0x23b, denoting Arm as architect of the component. */
        uint32_t present               : 1;  /**< [ 20: 20](RO) Returns 1, indicating that the DEVARCH register is present. */
        uint32_t revision              : 4;  /**< [ 19: 16](RO) Architecture revision. Returns the revision of the architecture that the ARCHID field specifies. */
        uint32_t archid                : 16; /**< [ 15:  0](RO) Architecture ID. Returns 0x0af7, identifying ROM Table Architecture v0. */
#else /* Word 0 - Little Endian */
        uint32_t archid                : 16; /**< [ 15:  0](RO) Architecture ID. Returns 0x0af7, identifying ROM Table Architecture v0. */
        uint32_t revision              : 4;  /**< [ 19: 16](RO) Architecture revision. Returns the revision of the architecture that the ARCHID field specifies. */
        uint32_t present               : 1;  /**< [ 20: 20](RO) Returns 1, indicating that the DEVARCH register is present. */
        uint32_t architect             : 11; /**< [ 31: 21](RO) Returns 0x23b, denoting Arm as architect of the component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_devarch_s cn; */
};
typedef union cavm_cst_cwx_rom_devarch cavm_cst_cwx_rom_devarch_t;

static inline uint64_t CAVM_CST_CWX_ROM_DEVARCH(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_DEVARCH(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fbcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fbcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fbcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fbcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_DEVARCH", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_DEVARCH(a) cavm_cst_cwx_rom_devarch_t
#define bustype_CAVM_CST_CWX_ROM_DEVARCH(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_DEVARCH(a) "CST_CWX_ROM_DEVARCH"
#define busnum_CAVM_CST_CWX_ROM_DEVARCH(a) (a)
#define arguments_CAVM_CST_CWX_ROM_DEVARCH(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_devid
 *
 * CST Cw Rom Devid Register
 * This register is IMPLEMENTATION DEFINED for each Part Number and Designer. The
 * register indicates the capabilities of the component.
 */
union cavm_cst_cwx_rom_devid
{
    uint32_t u;
    struct cavm_cst_cwx_rom_devid_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_6_31         : 26;
        uint32_t prr                   : 1;  /**< [  5:  5](RO) Indicates that power request functionality is included. Set by the GPR_PRESENT parameter. */
        uint32_t sysmem                : 1;  /**< [  4:  4](RO) Indicates whether system memory is present on the bus. Set by the SYSMEM parameter. */
        uint32_t reserved_3            : 1;
        uint32_t format                : 3;  /**< [  2:  0](RO) Indicates that this is a 32-bit ROM table. */
#else /* Word 0 - Little Endian */
        uint32_t format                : 3;  /**< [  2:  0](RO) Indicates that this is a 32-bit ROM table. */
        uint32_t reserved_3            : 1;
        uint32_t sysmem                : 1;  /**< [  4:  4](RO) Indicates whether system memory is present on the bus. Set by the SYSMEM parameter. */
        uint32_t prr                   : 1;  /**< [  5:  5](RO) Indicates that power request functionality is included. Set by the GPR_PRESENT parameter. */
        uint32_t reserved_6_31         : 26;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_devid_s cn; */
};
typedef union cavm_cst_cwx_rom_devid cavm_cst_cwx_rom_devid_t;

static inline uint64_t CAVM_CST_CWX_ROM_DEVID(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_DEVID(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fc8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fc8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fc8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fc8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_DEVID", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_DEVID(a) cavm_cst_cwx_rom_devid_t
#define bustype_CAVM_CST_CWX_ROM_DEVID(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_DEVID(a) "CST_CWX_ROM_DEVID"
#define busnum_CAVM_CST_CWX_ROM_DEVID(a) (a)
#define arguments_CAVM_CST_CWX_ROM_DEVID(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr0
 *
 * CST Cw Rom Pidr0 Register
 * The PIDR0 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr0
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr0_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t part_0                : 8;  /**< [  7:  0](RO) Part number, bits[7:0]. Set by the configuration inputs part_number[7:0] */
#else /* Word 0 - Little Endian */
        uint32_t part_0                : 8;  /**< [  7:  0](RO) Part number, bits[7:0]. Set by the configuration inputs part_number[7:0] */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr0_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr0 cavm_cst_cwx_rom_pidr0_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR0(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR0(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fe0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fe0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fe0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fe0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR0", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR0(a) cavm_cst_cwx_rom_pidr0_t
#define bustype_CAVM_CST_CWX_ROM_PIDR0(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR0(a) "CST_CWX_ROM_PIDR0"
#define busnum_CAVM_CST_CWX_ROM_PIDR0(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR0(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr1
 *
 * CST Cw Rom Pidr1 Register
 * The PIDR1 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr1
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr1_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t des_0                 : 4;  /**< [  7:  4](RO) JEP106 identification code, bits[3:0]. Set by the configuration inputs
                                                                 jep106_id[3:0]. Together, with PIDR4.DES_2 and PIDR2.DES_1, they indicate the
                                                                 designer of the component and not the implementer, except where the two are the
                                                                 same. */
        uint32_t part_1                : 4;  /**< [  3:  0](RO) Part number, bits[11:8]. Set by the configuration inputs part_number[11:8]. */
#else /* Word 0 - Little Endian */
        uint32_t part_1                : 4;  /**< [  3:  0](RO) Part number, bits[11:8]. Set by the configuration inputs part_number[11:8]. */
        uint32_t des_0                 : 4;  /**< [  7:  4](RO) JEP106 identification code, bits[3:0]. Set by the configuration inputs
                                                                 jep106_id[3:0]. Together, with PIDR4.DES_2 and PIDR2.DES_1, they indicate the
                                                                 designer of the component and not the implementer, except where the two are the
                                                                 same. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr1_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr1 cavm_cst_cwx_rom_pidr1_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR1(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR1(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fe4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fe4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fe4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fe4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR1", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR1(a) cavm_cst_cwx_rom_pidr1_t
#define bustype_CAVM_CST_CWX_ROM_PIDR1(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR1(a) "CST_CWX_ROM_PIDR1"
#define busnum_CAVM_CST_CWX_ROM_PIDR1(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR1(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr2
 *
 * CST Cw Rom Pidr2 Register
 * The PIDR2 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr2
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr2_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t revision              : 4;  /**< [  7:  4](RO) Revision. Set by the configuration inputs revision[3:0]. */
        uint32_t jedec                 : 1;  /**< [  3:  3](RO) 1 - Always set. Indicates that a JEDEC assigned value is used. */
        uint32_t des_1                 : 3;  /**< [  2:  0](RO) JEP106 identification code, bits[6:4]. Set by the configuration inputs
                                                                 jep106_id[6:4]. Together, with PIDR4.DES_2 and PIDR1.DES_0, they indicate the
                                                                 designer of the component and not the implementer, except where the two are the
                                                                 same. */
#else /* Word 0 - Little Endian */
        uint32_t des_1                 : 3;  /**< [  2:  0](RO) JEP106 identification code, bits[6:4]. Set by the configuration inputs
                                                                 jep106_id[6:4]. Together, with PIDR4.DES_2 and PIDR1.DES_0, they indicate the
                                                                 designer of the component and not the implementer, except where the two are the
                                                                 same. */
        uint32_t jedec                 : 1;  /**< [  3:  3](RO) 1 - Always set. Indicates that a JEDEC assigned value is used. */
        uint32_t revision              : 4;  /**< [  7:  4](RO) Revision. Set by the configuration inputs revision[3:0]. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr2_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr2 cavm_cst_cwx_rom_pidr2_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR2(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR2(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fe8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fe8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fe8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fe8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR2", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR2(a) cavm_cst_cwx_rom_pidr2_t
#define bustype_CAVM_CST_CWX_ROM_PIDR2(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR2(a) "CST_CWX_ROM_PIDR2"
#define busnum_CAVM_CST_CWX_ROM_PIDR2(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR2(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr3
 *
 * CST Cw Rom Pidr3 Register
 * The PIDR3 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr3
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr3_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t revand                : 4;  /**< [  7:  4](RO) This field indicates minor errata fixes specific to this design, for example
                                                                 metal fixes after implementation. In most cases this field is 0x0. */
        uint32_t cmod                  : 4;  /**< [  3:  0](RO) Customer Modified. Where the component is reusable IP, this value indicates if
                                                                 the customer has modified the behavior of the component. In most cases this
                                                                 field is 0x0. */
#else /* Word 0 - Little Endian */
        uint32_t cmod                  : 4;  /**< [  3:  0](RO) Customer Modified. Where the component is reusable IP, this value indicates if
                                                                 the customer has modified the behavior of the component. In most cases this
                                                                 field is 0x0. */
        uint32_t revand                : 4;  /**< [  7:  4](RO) This field indicates minor errata fixes specific to this design, for example
                                                                 metal fixes after implementation. In most cases this field is 0x0. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr3_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr3 cavm_cst_cwx_rom_pidr3_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR3(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR3(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR3", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR3(a) cavm_cst_cwx_rom_pidr3_t
#define bustype_CAVM_CST_CWX_ROM_PIDR3(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR3(a) "CST_CWX_ROM_PIDR3"
#define busnum_CAVM_CST_CWX_ROM_PIDR3(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR3(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr4
 *
 * CST Cw Rom Pidr4 Register
 * The PIDR4 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr4
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr4_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t size                  : 4;  /**< [  7:  4](RO) Indicates the memory size that is used by this component. Returns 0 indicating
                                                                 that the component uses an UNKNOWN number of 4KB blocks. Using the SIZE field to
                                                                 indicate the size of the component is deprecated. */
        uint32_t des_2                 : 4;  /**< [  3:  0](RO) JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0, they
                                                                 indicate the designer of the component and not the implementer, except where the
                                                                 two are the same. */
#else /* Word 0 - Little Endian */
        uint32_t des_2                 : 4;  /**< [  3:  0](RO) JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0, they
                                                                 indicate the designer of the component and not the implementer, except where the
                                                                 two are the same. */
        uint32_t size                  : 4;  /**< [  7:  4](RO) Indicates the memory size that is used by this component. Returns 0 indicating
                                                                 that the component uses an UNKNOWN number of 4KB blocks. Using the SIZE field to
                                                                 indicate the size of the component is deprecated. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr4_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr4 cavm_cst_cwx_rom_pidr4_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR4(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR4(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fd0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fd0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fd0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fd0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR4", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR4(a) cavm_cst_cwx_rom_pidr4_t
#define bustype_CAVM_CST_CWX_ROM_PIDR4(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR4(a) "CST_CWX_ROM_PIDR4"
#define busnum_CAVM_CST_CWX_ROM_PIDR4(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR4(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr5
 *
 * CST Cw Rom Pidr5 Register
 * The PIDR5 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr5
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr5_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t pidr5                 : 8;  /**< [  7:  0](RO) Reserved. */
#else /* Word 0 - Little Endian */
        uint32_t pidr5                 : 8;  /**< [  7:  0](RO) Reserved. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr5_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr5 cavm_cst_cwx_rom_pidr5_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR5(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR5(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fd4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fd4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fd4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fd4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR5", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR5(a) cavm_cst_cwx_rom_pidr5_t
#define bustype_CAVM_CST_CWX_ROM_PIDR5(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR5(a) "CST_CWX_ROM_PIDR5"
#define busnum_CAVM_CST_CWX_ROM_PIDR5(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR5(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr6
 *
 * CST Cw Rom Pidr6 Register
 * The PIDR6 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr6
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr6_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t pidr6                 : 8;  /**< [  7:  0](RO) Reserved. */
#else /* Word 0 - Little Endian */
        uint32_t pidr6                 : 8;  /**< [  7:  0](RO) Reserved. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr6_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr6 cavm_cst_cwx_rom_pidr6_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR6(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR6(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fd8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fd8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fd8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fd8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR6", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR6(a) cavm_cst_cwx_rom_pidr6_t
#define bustype_CAVM_CST_CWX_ROM_PIDR6(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR6(a) "CST_CWX_ROM_PIDR6"
#define busnum_CAVM_CST_CWX_ROM_PIDR6(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR6(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_pidr7
 *
 * CST Cw Rom Pidr7 Register
 * The PIDR7 register is part of the set of peripheral identification registers.
 */
union cavm_cst_cwx_rom_pidr7
{
    uint32_t u;
    struct cavm_cst_cwx_rom_pidr7_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t reserved_8_31         : 24;
        uint32_t pidr7                 : 8;  /**< [  7:  0](RO) Reserved. */
#else /* Word 0 - Little Endian */
        uint32_t pidr7                 : 8;  /**< [  7:  0](RO) Reserved. */
        uint32_t reserved_8_31         : 24;
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_pidr7_s cn; */
};
typedef union cavm_cst_cwx_rom_pidr7 cavm_cst_cwx_rom_pidr7_t;

static inline uint64_t CAVM_CST_CWX_ROM_PIDR7(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_PIDR7(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000fdcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000fdcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000fdcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000fdcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_PIDR7", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_PIDR7(a) cavm_cst_cwx_rom_pidr7_t
#define bustype_CAVM_CST_CWX_ROM_PIDR7(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_PIDR7(a) "CST_CWX_ROM_PIDR7"
#define busnum_CAVM_CST_CWX_ROM_PIDR7(a) (a)
#define arguments_CAVM_CST_CWX_ROM_PIDR7(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry0
 *
 * CST Cw Rom Romentry0 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry0
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry0_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry0_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry0 cavm_cst_cwx_rom_romentry0_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY0(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY0(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000000ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000000ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000000ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000000ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY0", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY0(a) cavm_cst_cwx_rom_romentry0_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY0(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY0(a) "CST_CWX_ROM_ROMENTRY0"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY0(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY0(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry1
 *
 * CST Cw Rom Romentry1 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry1
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry1_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry1_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry1 cavm_cst_cwx_rom_romentry1_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY1(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY1(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000004ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000004ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000004ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000004ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY1", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY1(a) cavm_cst_cwx_rom_romentry1_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY1(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY1(a) "CST_CWX_ROM_ROMENTRY1"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY1(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY1(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry10
 *
 * CST Cw Rom Romentry10 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry10
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry10_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry10_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry10 cavm_cst_cwx_rom_romentry10_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY10(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY10(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000028ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000028ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000028ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000028ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY10", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY10(a) cavm_cst_cwx_rom_romentry10_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY10(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY10(a) "CST_CWX_ROM_ROMENTRY10"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY10(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY10(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry100
 *
 * CST Cw Rom Romentry100 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry100
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry100_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry100_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry100 cavm_cst_cwx_rom_romentry100_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY100(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY100(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000190ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000190ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000190ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000190ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY100", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY100(a) cavm_cst_cwx_rom_romentry100_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY100(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY100(a) "CST_CWX_ROM_ROMENTRY100"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY100(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY100(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry101
 *
 * CST Cw Rom Romentry101 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry101
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry101_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry101_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry101 cavm_cst_cwx_rom_romentry101_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY101(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY101(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000194ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000194ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000194ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000194ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY101", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY101(a) cavm_cst_cwx_rom_romentry101_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY101(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY101(a) "CST_CWX_ROM_ROMENTRY101"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY101(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY101(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry102
 *
 * CST Cw Rom Romentry102 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry102
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry102_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry102_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry102 cavm_cst_cwx_rom_romentry102_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY102(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY102(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000198ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000198ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000198ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000198ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY102", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY102(a) cavm_cst_cwx_rom_romentry102_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY102(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY102(a) "CST_CWX_ROM_ROMENTRY102"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY102(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY102(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry103
 *
 * CST Cw Rom Romentry103 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry103
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry103_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry103_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry103 cavm_cst_cwx_rom_romentry103_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY103(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY103(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400019cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400019cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400019cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400019cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY103", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY103(a) cavm_cst_cwx_rom_romentry103_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY103(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY103(a) "CST_CWX_ROM_ROMENTRY103"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY103(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY103(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry104
 *
 * CST Cw Rom Romentry104 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry104
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry104_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry104_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry104 cavm_cst_cwx_rom_romentry104_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY104(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY104(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY104", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY104(a) cavm_cst_cwx_rom_romentry104_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY104(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY104(a) "CST_CWX_ROM_ROMENTRY104"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY104(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY104(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry105
 *
 * CST Cw Rom Romentry105 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry105
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry105_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry105_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry105 cavm_cst_cwx_rom_romentry105_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY105(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY105(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY105", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY105(a) cavm_cst_cwx_rom_romentry105_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY105(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY105(a) "CST_CWX_ROM_ROMENTRY105"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY105(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY105(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry106
 *
 * CST Cw Rom Romentry106 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry106
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry106_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry106_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry106 cavm_cst_cwx_rom_romentry106_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY106(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY106(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY106", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY106(a) cavm_cst_cwx_rom_romentry106_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY106(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY106(a) "CST_CWX_ROM_ROMENTRY106"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY106(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY106(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry107
 *
 * CST Cw Rom Romentry107 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry107
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry107_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry107_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry107 cavm_cst_cwx_rom_romentry107_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY107(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY107(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY107", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY107(a) cavm_cst_cwx_rom_romentry107_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY107(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY107(a) "CST_CWX_ROM_ROMENTRY107"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY107(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY107(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry108
 *
 * CST Cw Rom Romentry108 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry108
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry108_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry108_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry108 cavm_cst_cwx_rom_romentry108_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY108(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY108(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY108", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY108(a) cavm_cst_cwx_rom_romentry108_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY108(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY108(a) "CST_CWX_ROM_ROMENTRY108"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY108(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY108(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry109
 *
 * CST Cw Rom Romentry109 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry109
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry109_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry109_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry109 cavm_cst_cwx_rom_romentry109_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY109(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY109(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY109", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY109(a) cavm_cst_cwx_rom_romentry109_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY109(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY109(a) "CST_CWX_ROM_ROMENTRY109"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY109(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY109(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry11
 *
 * CST Cw Rom Romentry11 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry11
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry11_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry11_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry11 cavm_cst_cwx_rom_romentry11_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY11(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY11(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400002cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400002cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400002cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400002cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY11", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY11(a) cavm_cst_cwx_rom_romentry11_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY11(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY11(a) "CST_CWX_ROM_ROMENTRY11"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY11(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY11(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry110
 *
 * CST Cw Rom Romentry110 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry110
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry110_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry110_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry110 cavm_cst_cwx_rom_romentry110_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY110(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY110(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY110", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY110(a) cavm_cst_cwx_rom_romentry110_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY110(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY110(a) "CST_CWX_ROM_ROMENTRY110"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY110(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY110(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry111
 *
 * CST Cw Rom Romentry111 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry111
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry111_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry111_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry111 cavm_cst_cwx_rom_romentry111_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY111(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY111(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY111", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY111(a) cavm_cst_cwx_rom_romentry111_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY111(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY111(a) "CST_CWX_ROM_ROMENTRY111"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY111(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY111(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry112
 *
 * CST Cw Rom Romentry112 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry112
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry112_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry112_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry112 cavm_cst_cwx_rom_romentry112_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY112(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY112(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY112", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY112(a) cavm_cst_cwx_rom_romentry112_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY112(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY112(a) "CST_CWX_ROM_ROMENTRY112"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY112(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY112(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry113
 *
 * CST Cw Rom Romentry113 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry113
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry113_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry113_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry113 cavm_cst_cwx_rom_romentry113_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY113(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY113(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY113", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY113(a) cavm_cst_cwx_rom_romentry113_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY113(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY113(a) "CST_CWX_ROM_ROMENTRY113"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY113(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY113(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry114
 *
 * CST Cw Rom Romentry114 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry114
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry114_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry114_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry114 cavm_cst_cwx_rom_romentry114_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY114(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY114(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY114", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY114(a) cavm_cst_cwx_rom_romentry114_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY114(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY114(a) "CST_CWX_ROM_ROMENTRY114"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY114(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY114(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry115
 *
 * CST Cw Rom Romentry115 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry115
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry115_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry115_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry115 cavm_cst_cwx_rom_romentry115_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY115(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY115(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY115", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY115(a) cavm_cst_cwx_rom_romentry115_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY115(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY115(a) "CST_CWX_ROM_ROMENTRY115"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY115(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY115(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry116
 *
 * CST Cw Rom Romentry116 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry116
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry116_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry116_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry116 cavm_cst_cwx_rom_romentry116_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY116(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY116(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY116", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY116(a) cavm_cst_cwx_rom_romentry116_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY116(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY116(a) "CST_CWX_ROM_ROMENTRY116"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY116(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY116(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry117
 *
 * CST Cw Rom Romentry117 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry117
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry117_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry117_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry117 cavm_cst_cwx_rom_romentry117_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY117(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY117(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY117", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY117(a) cavm_cst_cwx_rom_romentry117_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY117(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY117(a) "CST_CWX_ROM_ROMENTRY117"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY117(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY117(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry118
 *
 * CST Cw Rom Romentry118 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry118
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry118_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry118_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry118 cavm_cst_cwx_rom_romentry118_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY118(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY118(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY118", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY118(a) cavm_cst_cwx_rom_romentry118_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY118(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY118(a) "CST_CWX_ROM_ROMENTRY118"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY118(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY118(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry119
 *
 * CST Cw Rom Romentry119 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry119
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry119_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry119_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry119 cavm_cst_cwx_rom_romentry119_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY119(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY119(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY119", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY119(a) cavm_cst_cwx_rom_romentry119_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY119(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY119(a) "CST_CWX_ROM_ROMENTRY119"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY119(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY119(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry12
 *
 * CST Cw Rom Romentry12 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry12
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry12_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry12_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry12 cavm_cst_cwx_rom_romentry12_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY12(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY12(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000030ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000030ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000030ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000030ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY12", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY12(a) cavm_cst_cwx_rom_romentry12_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY12(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY12(a) "CST_CWX_ROM_ROMENTRY12"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY12(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY12(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry120
 *
 * CST Cw Rom Romentry120 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry120
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry120_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry120_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry120 cavm_cst_cwx_rom_romentry120_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY120(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY120(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY120", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY120(a) cavm_cst_cwx_rom_romentry120_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY120(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY120(a) "CST_CWX_ROM_ROMENTRY120"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY120(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY120(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry121
 *
 * CST Cw Rom Romentry121 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry121
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry121_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry121_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry121 cavm_cst_cwx_rom_romentry121_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY121(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY121(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY121", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY121(a) cavm_cst_cwx_rom_romentry121_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY121(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY121(a) "CST_CWX_ROM_ROMENTRY121"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY121(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY121(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry122
 *
 * CST Cw Rom Romentry122 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry122
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry122_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry122_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry122 cavm_cst_cwx_rom_romentry122_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY122(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY122(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY122", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY122(a) cavm_cst_cwx_rom_romentry122_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY122(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY122(a) "CST_CWX_ROM_ROMENTRY122"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY122(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY122(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry123
 *
 * CST Cw Rom Romentry123 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry123
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry123_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry123_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry123 cavm_cst_cwx_rom_romentry123_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY123(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY123(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY123", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY123(a) cavm_cst_cwx_rom_romentry123_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY123(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY123(a) "CST_CWX_ROM_ROMENTRY123"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY123(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY123(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry124
 *
 * CST Cw Rom Romentry124 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry124
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry124_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry124_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry124 cavm_cst_cwx_rom_romentry124_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY124(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY124(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY124", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY124(a) cavm_cst_cwx_rom_romentry124_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY124(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY124(a) "CST_CWX_ROM_ROMENTRY124"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY124(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY124(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry125
 *
 * CST Cw Rom Romentry125 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry125
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry125_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry125_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry125 cavm_cst_cwx_rom_romentry125_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY125(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY125(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY125", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY125(a) cavm_cst_cwx_rom_romentry125_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY125(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY125(a) "CST_CWX_ROM_ROMENTRY125"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY125(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY125(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry126
 *
 * CST Cw Rom Romentry126 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry126
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry126_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry126_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry126 cavm_cst_cwx_rom_romentry126_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY126(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY126(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY126", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY126(a) cavm_cst_cwx_rom_romentry126_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY126(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY126(a) "CST_CWX_ROM_ROMENTRY126"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY126(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY126(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry127
 *
 * CST Cw Rom Romentry127 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry127
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry127_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry127_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry127 cavm_cst_cwx_rom_romentry127_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY127(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY127(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040001fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040001fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040001fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040001fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY127", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY127(a) cavm_cst_cwx_rom_romentry127_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY127(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY127(a) "CST_CWX_ROM_ROMENTRY127"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY127(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY127(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry128
 *
 * CST Cw Rom Romentry128 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry128
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry128_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry128_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry128 cavm_cst_cwx_rom_romentry128_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY128(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY128(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000200ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000200ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000200ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000200ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY128", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY128(a) cavm_cst_cwx_rom_romentry128_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY128(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY128(a) "CST_CWX_ROM_ROMENTRY128"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY128(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY128(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry129
 *
 * CST Cw Rom Romentry129 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry129
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry129_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry129_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry129 cavm_cst_cwx_rom_romentry129_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY129(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY129(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000204ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000204ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000204ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000204ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY129", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY129(a) cavm_cst_cwx_rom_romentry129_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY129(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY129(a) "CST_CWX_ROM_ROMENTRY129"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY129(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY129(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry13
 *
 * CST Cw Rom Romentry13 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry13
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry13_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry13_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry13 cavm_cst_cwx_rom_romentry13_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY13(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY13(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000034ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000034ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000034ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000034ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY13", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY13(a) cavm_cst_cwx_rom_romentry13_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY13(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY13(a) "CST_CWX_ROM_ROMENTRY13"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY13(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY13(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry130
 *
 * CST Cw Rom Romentry130 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry130
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry130_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry130_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry130 cavm_cst_cwx_rom_romentry130_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY130(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY130(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000208ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000208ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000208ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000208ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY130", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY130(a) cavm_cst_cwx_rom_romentry130_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY130(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY130(a) "CST_CWX_ROM_ROMENTRY130"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY130(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY130(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry131
 *
 * CST Cw Rom Romentry131 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry131
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry131_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry131_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry131 cavm_cst_cwx_rom_romentry131_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY131(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY131(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400020cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400020cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400020cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400020cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY131", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY131(a) cavm_cst_cwx_rom_romentry131_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY131(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY131(a) "CST_CWX_ROM_ROMENTRY131"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY131(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY131(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry132
 *
 * CST Cw Rom Romentry132 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry132
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry132_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry132_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry132 cavm_cst_cwx_rom_romentry132_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY132(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY132(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000210ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000210ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000210ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000210ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY132", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY132(a) cavm_cst_cwx_rom_romentry132_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY132(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY132(a) "CST_CWX_ROM_ROMENTRY132"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY132(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY132(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry133
 *
 * CST Cw Rom Romentry133 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry133
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry133_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry133_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry133 cavm_cst_cwx_rom_romentry133_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY133(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY133(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000214ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000214ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000214ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000214ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY133", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY133(a) cavm_cst_cwx_rom_romentry133_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY133(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY133(a) "CST_CWX_ROM_ROMENTRY133"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY133(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY133(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry134
 *
 * CST Cw Rom Romentry134 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry134
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry134_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry134_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry134 cavm_cst_cwx_rom_romentry134_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY134(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY134(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000218ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000218ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000218ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000218ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY134", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY134(a) cavm_cst_cwx_rom_romentry134_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY134(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY134(a) "CST_CWX_ROM_ROMENTRY134"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY134(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY134(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry135
 *
 * CST Cw Rom Romentry135 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry135
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry135_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry135_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry135 cavm_cst_cwx_rom_romentry135_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY135(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY135(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400021cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400021cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400021cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400021cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY135", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY135(a) cavm_cst_cwx_rom_romentry135_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY135(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY135(a) "CST_CWX_ROM_ROMENTRY135"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY135(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY135(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry136
 *
 * CST Cw Rom Romentry136 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry136
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry136_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry136_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry136 cavm_cst_cwx_rom_romentry136_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY136(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY136(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000220ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000220ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000220ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000220ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY136", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY136(a) cavm_cst_cwx_rom_romentry136_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY136(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY136(a) "CST_CWX_ROM_ROMENTRY136"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY136(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY136(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry137
 *
 * CST Cw Rom Romentry137 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry137
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry137_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry137_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry137 cavm_cst_cwx_rom_romentry137_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY137(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY137(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000224ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000224ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000224ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000224ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY137", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY137(a) cavm_cst_cwx_rom_romentry137_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY137(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY137(a) "CST_CWX_ROM_ROMENTRY137"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY137(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY137(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry138
 *
 * CST Cw Rom Romentry138 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry138
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry138_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry138_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry138 cavm_cst_cwx_rom_romentry138_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY138(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY138(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000228ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000228ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000228ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000228ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY138", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY138(a) cavm_cst_cwx_rom_romentry138_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY138(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY138(a) "CST_CWX_ROM_ROMENTRY138"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY138(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY138(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry139
 *
 * CST Cw Rom Romentry139 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry139
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry139_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry139_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry139 cavm_cst_cwx_rom_romentry139_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY139(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY139(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400022cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400022cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400022cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400022cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY139", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY139(a) cavm_cst_cwx_rom_romentry139_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY139(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY139(a) "CST_CWX_ROM_ROMENTRY139"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY139(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY139(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry14
 *
 * CST Cw Rom Romentry14 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry14
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry14_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry14_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry14 cavm_cst_cwx_rom_romentry14_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY14(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY14(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000038ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000038ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000038ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000038ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY14", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY14(a) cavm_cst_cwx_rom_romentry14_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY14(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY14(a) "CST_CWX_ROM_ROMENTRY14"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY14(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY14(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry140
 *
 * CST Cw Rom Romentry140 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry140
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry140_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry140_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry140 cavm_cst_cwx_rom_romentry140_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY140(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY140(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000230ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000230ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000230ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000230ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY140", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY140(a) cavm_cst_cwx_rom_romentry140_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY140(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY140(a) "CST_CWX_ROM_ROMENTRY140"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY140(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY140(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry141
 *
 * CST Cw Rom Romentry141 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry141
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry141_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry141_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry141 cavm_cst_cwx_rom_romentry141_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY141(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY141(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000234ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000234ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000234ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000234ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY141", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY141(a) cavm_cst_cwx_rom_romentry141_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY141(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY141(a) "CST_CWX_ROM_ROMENTRY141"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY141(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY141(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry142
 *
 * CST Cw Rom Romentry142 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry142
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry142_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry142_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry142 cavm_cst_cwx_rom_romentry142_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY142(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY142(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000238ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000238ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000238ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000238ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY142", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY142(a) cavm_cst_cwx_rom_romentry142_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY142(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY142(a) "CST_CWX_ROM_ROMENTRY142"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY142(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY142(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry143
 *
 * CST Cw Rom Romentry143 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry143
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry143_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry143_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry143 cavm_cst_cwx_rom_romentry143_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY143(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY143(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400023cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400023cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400023cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400023cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY143", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY143(a) cavm_cst_cwx_rom_romentry143_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY143(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY143(a) "CST_CWX_ROM_ROMENTRY143"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY143(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY143(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry144
 *
 * CST Cw Rom Romentry144 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry144
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry144_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry144_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry144 cavm_cst_cwx_rom_romentry144_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY144(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY144(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000240ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000240ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000240ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000240ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY144", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY144(a) cavm_cst_cwx_rom_romentry144_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY144(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY144(a) "CST_CWX_ROM_ROMENTRY144"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY144(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY144(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry145
 *
 * CST Cw Rom Romentry145 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry145
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry145_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry145_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry145 cavm_cst_cwx_rom_romentry145_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY145(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY145(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000244ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000244ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000244ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000244ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY145", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY145(a) cavm_cst_cwx_rom_romentry145_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY145(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY145(a) "CST_CWX_ROM_ROMENTRY145"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY145(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY145(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry146
 *
 * CST Cw Rom Romentry146 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry146
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry146_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry146_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry146 cavm_cst_cwx_rom_romentry146_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY146(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY146(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000248ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000248ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000248ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000248ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY146", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY146(a) cavm_cst_cwx_rom_romentry146_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY146(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY146(a) "CST_CWX_ROM_ROMENTRY146"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY146(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY146(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry147
 *
 * CST Cw Rom Romentry147 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry147
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry147_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry147_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry147 cavm_cst_cwx_rom_romentry147_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY147(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY147(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400024cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400024cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400024cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400024cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY147", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY147(a) cavm_cst_cwx_rom_romentry147_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY147(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY147(a) "CST_CWX_ROM_ROMENTRY147"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY147(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY147(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry148
 *
 * CST Cw Rom Romentry148 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry148
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry148_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry148_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry148 cavm_cst_cwx_rom_romentry148_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY148(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY148(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000250ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000250ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000250ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000250ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY148", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY148(a) cavm_cst_cwx_rom_romentry148_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY148(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY148(a) "CST_CWX_ROM_ROMENTRY148"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY148(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY148(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry149
 *
 * CST Cw Rom Romentry149 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry149
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry149_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry149_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry149 cavm_cst_cwx_rom_romentry149_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY149(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY149(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000254ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000254ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000254ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000254ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY149", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY149(a) cavm_cst_cwx_rom_romentry149_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY149(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY149(a) "CST_CWX_ROM_ROMENTRY149"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY149(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY149(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry15
 *
 * CST Cw Rom Romentry15 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry15
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry15_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry15_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry15 cavm_cst_cwx_rom_romentry15_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY15(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY15(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400003cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400003cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400003cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400003cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY15", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY15(a) cavm_cst_cwx_rom_romentry15_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY15(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY15(a) "CST_CWX_ROM_ROMENTRY15"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY15(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY15(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry150
 *
 * CST Cw Rom Romentry150 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry150
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry150_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry150_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry150 cavm_cst_cwx_rom_romentry150_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY150(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY150(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000258ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000258ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000258ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000258ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY150", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY150(a) cavm_cst_cwx_rom_romentry150_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY150(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY150(a) "CST_CWX_ROM_ROMENTRY150"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY150(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY150(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry151
 *
 * CST Cw Rom Romentry151 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry151
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry151_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry151_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry151 cavm_cst_cwx_rom_romentry151_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY151(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY151(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400025cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400025cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400025cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400025cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY151", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY151(a) cavm_cst_cwx_rom_romentry151_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY151(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY151(a) "CST_CWX_ROM_ROMENTRY151"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY151(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY151(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry152
 *
 * CST Cw Rom Romentry152 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry152
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry152_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry152_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry152 cavm_cst_cwx_rom_romentry152_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY152(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY152(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000260ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000260ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000260ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000260ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY152", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY152(a) cavm_cst_cwx_rom_romentry152_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY152(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY152(a) "CST_CWX_ROM_ROMENTRY152"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY152(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY152(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry153
 *
 * CST Cw Rom Romentry153 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry153
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry153_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry153_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry153 cavm_cst_cwx_rom_romentry153_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY153(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY153(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000264ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000264ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000264ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000264ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY153", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY153(a) cavm_cst_cwx_rom_romentry153_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY153(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY153(a) "CST_CWX_ROM_ROMENTRY153"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY153(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY153(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry154
 *
 * CST Cw Rom Romentry154 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry154
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry154_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry154_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry154 cavm_cst_cwx_rom_romentry154_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY154(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY154(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000268ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000268ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000268ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000268ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY154", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY154(a) cavm_cst_cwx_rom_romentry154_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY154(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY154(a) "CST_CWX_ROM_ROMENTRY154"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY154(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY154(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry155
 *
 * CST Cw Rom Romentry155 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry155
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry155_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry155_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry155 cavm_cst_cwx_rom_romentry155_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY155(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY155(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400026cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400026cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400026cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400026cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY155", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY155(a) cavm_cst_cwx_rom_romentry155_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY155(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY155(a) "CST_CWX_ROM_ROMENTRY155"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY155(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY155(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry156
 *
 * CST Cw Rom Romentry156 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry156
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry156_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry156_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry156 cavm_cst_cwx_rom_romentry156_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY156(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY156(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000270ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000270ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000270ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000270ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY156", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY156(a) cavm_cst_cwx_rom_romentry156_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY156(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY156(a) "CST_CWX_ROM_ROMENTRY156"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY156(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY156(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry157
 *
 * CST Cw Rom Romentry157 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry157
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry157_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry157_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry157 cavm_cst_cwx_rom_romentry157_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY157(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY157(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000274ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000274ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000274ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000274ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY157", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY157(a) cavm_cst_cwx_rom_romentry157_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY157(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY157(a) "CST_CWX_ROM_ROMENTRY157"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY157(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY157(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry158
 *
 * CST Cw Rom Romentry158 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry158
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry158_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry158_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry158 cavm_cst_cwx_rom_romentry158_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY158(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY158(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000278ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000278ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000278ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000278ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY158", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY158(a) cavm_cst_cwx_rom_romentry158_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY158(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY158(a) "CST_CWX_ROM_ROMENTRY158"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY158(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY158(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry159
 *
 * CST Cw Rom Romentry159 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry159
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry159_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry159_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry159 cavm_cst_cwx_rom_romentry159_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY159(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY159(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400027cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400027cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400027cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400027cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY159", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY159(a) cavm_cst_cwx_rom_romentry159_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY159(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY159(a) "CST_CWX_ROM_ROMENTRY159"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY159(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY159(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry16
 *
 * CST Cw Rom Romentry16 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry16
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry16_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry16_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry16 cavm_cst_cwx_rom_romentry16_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY16(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY16(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000040ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000040ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000040ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000040ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY16", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY16(a) cavm_cst_cwx_rom_romentry16_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY16(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY16(a) "CST_CWX_ROM_ROMENTRY16"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY16(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY16(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry160
 *
 * CST Cw Rom Romentry160 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry160
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry160_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry160_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry160 cavm_cst_cwx_rom_romentry160_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY160(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY160(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000280ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000280ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000280ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000280ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY160", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY160(a) cavm_cst_cwx_rom_romentry160_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY160(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY160(a) "CST_CWX_ROM_ROMENTRY160"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY160(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY160(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry161
 *
 * CST Cw Rom Romentry161 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry161
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry161_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry161_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry161 cavm_cst_cwx_rom_romentry161_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY161(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY161(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000284ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000284ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000284ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000284ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY161", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY161(a) cavm_cst_cwx_rom_romentry161_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY161(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY161(a) "CST_CWX_ROM_ROMENTRY161"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY161(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY161(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry162
 *
 * CST Cw Rom Romentry162 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry162
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry162_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry162_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry162 cavm_cst_cwx_rom_romentry162_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY162(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY162(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000288ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000288ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000288ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000288ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY162", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY162(a) cavm_cst_cwx_rom_romentry162_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY162(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY162(a) "CST_CWX_ROM_ROMENTRY162"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY162(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY162(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry163
 *
 * CST Cw Rom Romentry163 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry163
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry163_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry163_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry163 cavm_cst_cwx_rom_romentry163_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY163(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY163(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400028cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400028cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400028cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400028cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY163", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY163(a) cavm_cst_cwx_rom_romentry163_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY163(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY163(a) "CST_CWX_ROM_ROMENTRY163"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY163(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY163(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry164
 *
 * CST Cw Rom Romentry164 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry164
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry164_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry164_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry164 cavm_cst_cwx_rom_romentry164_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY164(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY164(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000290ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000290ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000290ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000290ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY164", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY164(a) cavm_cst_cwx_rom_romentry164_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY164(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY164(a) "CST_CWX_ROM_ROMENTRY164"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY164(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY164(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry165
 *
 * CST Cw Rom Romentry165 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry165
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry165_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry165_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry165 cavm_cst_cwx_rom_romentry165_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY165(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY165(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000294ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000294ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000294ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000294ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY165", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY165(a) cavm_cst_cwx_rom_romentry165_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY165(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY165(a) "CST_CWX_ROM_ROMENTRY165"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY165(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY165(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry166
 *
 * CST Cw Rom Romentry166 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry166
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry166_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry166_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry166 cavm_cst_cwx_rom_romentry166_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY166(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY166(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000298ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000298ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000298ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000298ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY166", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY166(a) cavm_cst_cwx_rom_romentry166_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY166(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY166(a) "CST_CWX_ROM_ROMENTRY166"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY166(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY166(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry167
 *
 * CST Cw Rom Romentry167 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry167
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry167_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry167_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry167 cavm_cst_cwx_rom_romentry167_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY167(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY167(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400029cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400029cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400029cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400029cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY167", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY167(a) cavm_cst_cwx_rom_romentry167_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY167(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY167(a) "CST_CWX_ROM_ROMENTRY167"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY167(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY167(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry168
 *
 * CST Cw Rom Romentry168 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry168
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry168_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry168_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry168 cavm_cst_cwx_rom_romentry168_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY168(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY168(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY168", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY168(a) cavm_cst_cwx_rom_romentry168_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY168(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY168(a) "CST_CWX_ROM_ROMENTRY168"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY168(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY168(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry169
 *
 * CST Cw Rom Romentry169 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry169
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry169_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry169_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry169 cavm_cst_cwx_rom_romentry169_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY169(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY169(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY169", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY169(a) cavm_cst_cwx_rom_romentry169_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY169(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY169(a) "CST_CWX_ROM_ROMENTRY169"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY169(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY169(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry17
 *
 * CST Cw Rom Romentry17 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry17
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry17_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry17_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry17 cavm_cst_cwx_rom_romentry17_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY17(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY17(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000044ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000044ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000044ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000044ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY17", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY17(a) cavm_cst_cwx_rom_romentry17_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY17(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY17(a) "CST_CWX_ROM_ROMENTRY17"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY17(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY17(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry170
 *
 * CST Cw Rom Romentry170 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry170
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry170_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry170_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry170 cavm_cst_cwx_rom_romentry170_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY170(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY170(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY170", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY170(a) cavm_cst_cwx_rom_romentry170_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY170(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY170(a) "CST_CWX_ROM_ROMENTRY170"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY170(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY170(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry171
 *
 * CST Cw Rom Romentry171 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry171
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry171_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry171_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry171 cavm_cst_cwx_rom_romentry171_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY171(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY171(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY171", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY171(a) cavm_cst_cwx_rom_romentry171_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY171(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY171(a) "CST_CWX_ROM_ROMENTRY171"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY171(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY171(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry172
 *
 * CST Cw Rom Romentry172 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry172
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry172_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry172_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry172 cavm_cst_cwx_rom_romentry172_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY172(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY172(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY172", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY172(a) cavm_cst_cwx_rom_romentry172_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY172(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY172(a) "CST_CWX_ROM_ROMENTRY172"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY172(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY172(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry173
 *
 * CST Cw Rom Romentry173 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry173
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry173_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry173_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry173 cavm_cst_cwx_rom_romentry173_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY173(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY173(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY173", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY173(a) cavm_cst_cwx_rom_romentry173_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY173(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY173(a) "CST_CWX_ROM_ROMENTRY173"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY173(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY173(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry174
 *
 * CST Cw Rom Romentry174 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry174
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry174_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry174_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry174 cavm_cst_cwx_rom_romentry174_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY174(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY174(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY174", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY174(a) cavm_cst_cwx_rom_romentry174_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY174(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY174(a) "CST_CWX_ROM_ROMENTRY174"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY174(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY174(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry175
 *
 * CST Cw Rom Romentry175 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry175
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry175_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry175_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry175 cavm_cst_cwx_rom_romentry175_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY175(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY175(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY175", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY175(a) cavm_cst_cwx_rom_romentry175_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY175(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY175(a) "CST_CWX_ROM_ROMENTRY175"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY175(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY175(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry176
 *
 * CST Cw Rom Romentry176 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry176
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry176_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry176_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry176 cavm_cst_cwx_rom_romentry176_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY176(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY176(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY176", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY176(a) cavm_cst_cwx_rom_romentry176_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY176(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY176(a) "CST_CWX_ROM_ROMENTRY176"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY176(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY176(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry177
 *
 * CST Cw Rom Romentry177 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry177
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry177_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry177_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry177 cavm_cst_cwx_rom_romentry177_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY177(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY177(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY177", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY177(a) cavm_cst_cwx_rom_romentry177_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY177(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY177(a) "CST_CWX_ROM_ROMENTRY177"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY177(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY177(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry178
 *
 * CST Cw Rom Romentry178 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry178
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry178_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry178_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry178 cavm_cst_cwx_rom_romentry178_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY178(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY178(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY178", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY178(a) cavm_cst_cwx_rom_romentry178_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY178(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY178(a) "CST_CWX_ROM_ROMENTRY178"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY178(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY178(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry179
 *
 * CST Cw Rom Romentry179 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry179
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry179_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry179_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry179 cavm_cst_cwx_rom_romentry179_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY179(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY179(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY179", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY179(a) cavm_cst_cwx_rom_romentry179_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY179(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY179(a) "CST_CWX_ROM_ROMENTRY179"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY179(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY179(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry18
 *
 * CST Cw Rom Romentry18 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry18
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry18_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry18_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry18 cavm_cst_cwx_rom_romentry18_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY18(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY18(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000048ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000048ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000048ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000048ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY18", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY18(a) cavm_cst_cwx_rom_romentry18_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY18(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY18(a) "CST_CWX_ROM_ROMENTRY18"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY18(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY18(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry180
 *
 * CST Cw Rom Romentry180 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry180
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry180_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry180_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry180 cavm_cst_cwx_rom_romentry180_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY180(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY180(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY180", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY180(a) cavm_cst_cwx_rom_romentry180_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY180(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY180(a) "CST_CWX_ROM_ROMENTRY180"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY180(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY180(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry181
 *
 * CST Cw Rom Romentry181 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry181
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry181_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry181_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry181 cavm_cst_cwx_rom_romentry181_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY181(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY181(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY181", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY181(a) cavm_cst_cwx_rom_romentry181_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY181(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY181(a) "CST_CWX_ROM_ROMENTRY181"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY181(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY181(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry182
 *
 * CST Cw Rom Romentry182 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry182
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry182_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry182_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry182 cavm_cst_cwx_rom_romentry182_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY182(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY182(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY182", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY182(a) cavm_cst_cwx_rom_romentry182_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY182(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY182(a) "CST_CWX_ROM_ROMENTRY182"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY182(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY182(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry183
 *
 * CST Cw Rom Romentry183 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry183
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry183_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry183_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry183 cavm_cst_cwx_rom_romentry183_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY183(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY183(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY183", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY183(a) cavm_cst_cwx_rom_romentry183_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY183(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY183(a) "CST_CWX_ROM_ROMENTRY183"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY183(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY183(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry184
 *
 * CST Cw Rom Romentry184 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry184
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry184_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry184_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry184 cavm_cst_cwx_rom_romentry184_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY184(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY184(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY184", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY184(a) cavm_cst_cwx_rom_romentry184_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY184(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY184(a) "CST_CWX_ROM_ROMENTRY184"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY184(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY184(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry185
 *
 * CST Cw Rom Romentry185 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry185
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry185_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry185_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry185 cavm_cst_cwx_rom_romentry185_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY185(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY185(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY185", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY185(a) cavm_cst_cwx_rom_romentry185_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY185(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY185(a) "CST_CWX_ROM_ROMENTRY185"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY185(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY185(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry186
 *
 * CST Cw Rom Romentry186 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry186
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry186_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry186_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry186 cavm_cst_cwx_rom_romentry186_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY186(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY186(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY186", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY186(a) cavm_cst_cwx_rom_romentry186_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY186(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY186(a) "CST_CWX_ROM_ROMENTRY186"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY186(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY186(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry187
 *
 * CST Cw Rom Romentry187 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry187
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry187_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry187_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry187 cavm_cst_cwx_rom_romentry187_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY187(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY187(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY187", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY187(a) cavm_cst_cwx_rom_romentry187_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY187(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY187(a) "CST_CWX_ROM_ROMENTRY187"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY187(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY187(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry188
 *
 * CST Cw Rom Romentry188 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry188
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry188_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry188_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry188 cavm_cst_cwx_rom_romentry188_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY188(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY188(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY188", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY188(a) cavm_cst_cwx_rom_romentry188_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY188(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY188(a) "CST_CWX_ROM_ROMENTRY188"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY188(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY188(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry189
 *
 * CST Cw Rom Romentry189 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry189
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry189_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry189_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry189 cavm_cst_cwx_rom_romentry189_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY189(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY189(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY189", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY189(a) cavm_cst_cwx_rom_romentry189_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY189(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY189(a) "CST_CWX_ROM_ROMENTRY189"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY189(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY189(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry19
 *
 * CST Cw Rom Romentry19 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry19
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry19_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry19_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry19 cavm_cst_cwx_rom_romentry19_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY19(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY19(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400004cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400004cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400004cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400004cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY19", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY19(a) cavm_cst_cwx_rom_romentry19_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY19(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY19(a) "CST_CWX_ROM_ROMENTRY19"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY19(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY19(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry190
 *
 * CST Cw Rom Romentry190 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry190
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry190_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry190_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry190 cavm_cst_cwx_rom_romentry190_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY190(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY190(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY190", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY190(a) cavm_cst_cwx_rom_romentry190_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY190(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY190(a) "CST_CWX_ROM_ROMENTRY190"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY190(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY190(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry191
 *
 * CST Cw Rom Romentry191 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry191
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry191_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry191_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry191 cavm_cst_cwx_rom_romentry191_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY191(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY191(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040002fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040002fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040002fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040002fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY191", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY191(a) cavm_cst_cwx_rom_romentry191_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY191(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY191(a) "CST_CWX_ROM_ROMENTRY191"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY191(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY191(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry192
 *
 * CST Cw Rom Romentry192 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry192
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry192_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry192_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry192 cavm_cst_cwx_rom_romentry192_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY192(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY192(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000300ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000300ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000300ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000300ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY192", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY192(a) cavm_cst_cwx_rom_romentry192_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY192(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY192(a) "CST_CWX_ROM_ROMENTRY192"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY192(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY192(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry193
 *
 * CST Cw Rom Romentry193 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry193
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry193_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry193_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry193 cavm_cst_cwx_rom_romentry193_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY193(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY193(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000304ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000304ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000304ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000304ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY193", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY193(a) cavm_cst_cwx_rom_romentry193_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY193(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY193(a) "CST_CWX_ROM_ROMENTRY193"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY193(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY193(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry194
 *
 * CST Cw Rom Romentry194 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry194
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry194_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry194_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry194 cavm_cst_cwx_rom_romentry194_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY194(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY194(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000308ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000308ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000308ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000308ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY194", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY194(a) cavm_cst_cwx_rom_romentry194_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY194(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY194(a) "CST_CWX_ROM_ROMENTRY194"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY194(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY194(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry195
 *
 * CST Cw Rom Romentry195 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry195
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry195_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry195_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry195 cavm_cst_cwx_rom_romentry195_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY195(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY195(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400030cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400030cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400030cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400030cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY195", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY195(a) cavm_cst_cwx_rom_romentry195_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY195(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY195(a) "CST_CWX_ROM_ROMENTRY195"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY195(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY195(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry196
 *
 * CST Cw Rom Romentry196 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry196
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry196_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry196_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry196 cavm_cst_cwx_rom_romentry196_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY196(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY196(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000310ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000310ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000310ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000310ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY196", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY196(a) cavm_cst_cwx_rom_romentry196_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY196(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY196(a) "CST_CWX_ROM_ROMENTRY196"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY196(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY196(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry197
 *
 * CST Cw Rom Romentry197 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry197
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry197_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry197_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry197 cavm_cst_cwx_rom_romentry197_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY197(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY197(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000314ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000314ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000314ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000314ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY197", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY197(a) cavm_cst_cwx_rom_romentry197_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY197(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY197(a) "CST_CWX_ROM_ROMENTRY197"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY197(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY197(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry198
 *
 * CST Cw Rom Romentry198 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry198
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry198_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry198_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry198 cavm_cst_cwx_rom_romentry198_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY198(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY198(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000318ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000318ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000318ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000318ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY198", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY198(a) cavm_cst_cwx_rom_romentry198_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY198(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY198(a) "CST_CWX_ROM_ROMENTRY198"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY198(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY198(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry199
 *
 * CST Cw Rom Romentry199 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry199
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry199_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry199_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry199 cavm_cst_cwx_rom_romentry199_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY199(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY199(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400031cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400031cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400031cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400031cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY199", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY199(a) cavm_cst_cwx_rom_romentry199_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY199(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY199(a) "CST_CWX_ROM_ROMENTRY199"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY199(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY199(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry2
 *
 * CST Cw Rom Romentry2 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry2
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry2_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry2_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry2 cavm_cst_cwx_rom_romentry2_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY2(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY2(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000008ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000008ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000008ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000008ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY2", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY2(a) cavm_cst_cwx_rom_romentry2_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY2(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY2(a) "CST_CWX_ROM_ROMENTRY2"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY2(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY2(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry20
 *
 * CST Cw Rom Romentry20 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry20
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry20_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry20_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry20 cavm_cst_cwx_rom_romentry20_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY20(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY20(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000050ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000050ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000050ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000050ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY20", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY20(a) cavm_cst_cwx_rom_romentry20_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY20(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY20(a) "CST_CWX_ROM_ROMENTRY20"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY20(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY20(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry200
 *
 * CST Cw Rom Romentry200 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry200
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry200_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry200_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry200 cavm_cst_cwx_rom_romentry200_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY200(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY200(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000320ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000320ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000320ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000320ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY200", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY200(a) cavm_cst_cwx_rom_romentry200_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY200(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY200(a) "CST_CWX_ROM_ROMENTRY200"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY200(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY200(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry201
 *
 * CST Cw Rom Romentry201 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry201
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry201_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry201_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry201 cavm_cst_cwx_rom_romentry201_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY201(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY201(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000324ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000324ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000324ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000324ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY201", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY201(a) cavm_cst_cwx_rom_romentry201_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY201(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY201(a) "CST_CWX_ROM_ROMENTRY201"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY201(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY201(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry202
 *
 * CST Cw Rom Romentry202 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry202
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry202_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry202_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry202 cavm_cst_cwx_rom_romentry202_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY202(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY202(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000328ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000328ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000328ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000328ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY202", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY202(a) cavm_cst_cwx_rom_romentry202_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY202(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY202(a) "CST_CWX_ROM_ROMENTRY202"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY202(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY202(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry203
 *
 * CST Cw Rom Romentry203 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry203
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry203_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry203_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry203 cavm_cst_cwx_rom_romentry203_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY203(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY203(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400032cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400032cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400032cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400032cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY203", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY203(a) cavm_cst_cwx_rom_romentry203_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY203(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY203(a) "CST_CWX_ROM_ROMENTRY203"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY203(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY203(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry204
 *
 * CST Cw Rom Romentry204 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry204
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry204_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry204_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry204 cavm_cst_cwx_rom_romentry204_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY204(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY204(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000330ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000330ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000330ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000330ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY204", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY204(a) cavm_cst_cwx_rom_romentry204_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY204(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY204(a) "CST_CWX_ROM_ROMENTRY204"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY204(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY204(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry205
 *
 * CST Cw Rom Romentry205 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry205
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry205_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry205_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry205 cavm_cst_cwx_rom_romentry205_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY205(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY205(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000334ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000334ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000334ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000334ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY205", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY205(a) cavm_cst_cwx_rom_romentry205_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY205(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY205(a) "CST_CWX_ROM_ROMENTRY205"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY205(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY205(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry206
 *
 * CST Cw Rom Romentry206 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry206
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry206_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry206_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry206 cavm_cst_cwx_rom_romentry206_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY206(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY206(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000338ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000338ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000338ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000338ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY206", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY206(a) cavm_cst_cwx_rom_romentry206_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY206(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY206(a) "CST_CWX_ROM_ROMENTRY206"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY206(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY206(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry207
 *
 * CST Cw Rom Romentry207 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry207
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry207_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry207_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry207 cavm_cst_cwx_rom_romentry207_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY207(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY207(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400033cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400033cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400033cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400033cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY207", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY207(a) cavm_cst_cwx_rom_romentry207_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY207(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY207(a) "CST_CWX_ROM_ROMENTRY207"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY207(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY207(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry208
 *
 * CST Cw Rom Romentry208 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry208
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry208_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry208_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry208 cavm_cst_cwx_rom_romentry208_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY208(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY208(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000340ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000340ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000340ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000340ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY208", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY208(a) cavm_cst_cwx_rom_romentry208_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY208(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY208(a) "CST_CWX_ROM_ROMENTRY208"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY208(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY208(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry209
 *
 * CST Cw Rom Romentry209 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry209
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry209_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry209_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry209 cavm_cst_cwx_rom_romentry209_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY209(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY209(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000344ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000344ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000344ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000344ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY209", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY209(a) cavm_cst_cwx_rom_romentry209_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY209(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY209(a) "CST_CWX_ROM_ROMENTRY209"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY209(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY209(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry21
 *
 * CST Cw Rom Romentry21 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry21
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry21_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry21_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry21 cavm_cst_cwx_rom_romentry21_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY21(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY21(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000054ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000054ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000054ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000054ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY21", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY21(a) cavm_cst_cwx_rom_romentry21_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY21(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY21(a) "CST_CWX_ROM_ROMENTRY21"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY21(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY21(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry210
 *
 * CST Cw Rom Romentry210 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry210
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry210_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry210_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry210 cavm_cst_cwx_rom_romentry210_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY210(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY210(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000348ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000348ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000348ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000348ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY210", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY210(a) cavm_cst_cwx_rom_romentry210_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY210(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY210(a) "CST_CWX_ROM_ROMENTRY210"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY210(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY210(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry211
 *
 * CST Cw Rom Romentry211 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry211
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry211_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry211_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry211 cavm_cst_cwx_rom_romentry211_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY211(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY211(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400034cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400034cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400034cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400034cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY211", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY211(a) cavm_cst_cwx_rom_romentry211_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY211(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY211(a) "CST_CWX_ROM_ROMENTRY211"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY211(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY211(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry212
 *
 * CST Cw Rom Romentry212 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry212
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry212_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry212_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry212 cavm_cst_cwx_rom_romentry212_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY212(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY212(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000350ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000350ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000350ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000350ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY212", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY212(a) cavm_cst_cwx_rom_romentry212_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY212(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY212(a) "CST_CWX_ROM_ROMENTRY212"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY212(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY212(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry213
 *
 * CST Cw Rom Romentry213 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry213
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry213_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry213_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry213 cavm_cst_cwx_rom_romentry213_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY213(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY213(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000354ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000354ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000354ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000354ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY213", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY213(a) cavm_cst_cwx_rom_romentry213_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY213(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY213(a) "CST_CWX_ROM_ROMENTRY213"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY213(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY213(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry214
 *
 * CST Cw Rom Romentry214 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry214
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry214_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry214_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry214 cavm_cst_cwx_rom_romentry214_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY214(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY214(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000358ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000358ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000358ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000358ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY214", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY214(a) cavm_cst_cwx_rom_romentry214_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY214(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY214(a) "CST_CWX_ROM_ROMENTRY214"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY214(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY214(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry215
 *
 * CST Cw Rom Romentry215 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry215
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry215_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry215_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry215 cavm_cst_cwx_rom_romentry215_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY215(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY215(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400035cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400035cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400035cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400035cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY215", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY215(a) cavm_cst_cwx_rom_romentry215_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY215(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY215(a) "CST_CWX_ROM_ROMENTRY215"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY215(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY215(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry216
 *
 * CST Cw Rom Romentry216 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry216
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry216_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry216_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry216 cavm_cst_cwx_rom_romentry216_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY216(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY216(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000360ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000360ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000360ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000360ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY216", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY216(a) cavm_cst_cwx_rom_romentry216_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY216(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY216(a) "CST_CWX_ROM_ROMENTRY216"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY216(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY216(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry217
 *
 * CST Cw Rom Romentry217 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry217
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry217_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry217_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry217 cavm_cst_cwx_rom_romentry217_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY217(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY217(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000364ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000364ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000364ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000364ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY217", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY217(a) cavm_cst_cwx_rom_romentry217_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY217(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY217(a) "CST_CWX_ROM_ROMENTRY217"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY217(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY217(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry218
 *
 * CST Cw Rom Romentry218 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry218
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry218_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry218_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry218 cavm_cst_cwx_rom_romentry218_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY218(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY218(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000368ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000368ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000368ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000368ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY218", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY218(a) cavm_cst_cwx_rom_romentry218_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY218(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY218(a) "CST_CWX_ROM_ROMENTRY218"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY218(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY218(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry219
 *
 * CST Cw Rom Romentry219 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry219
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry219_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry219_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry219 cavm_cst_cwx_rom_romentry219_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY219(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY219(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400036cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400036cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400036cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400036cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY219", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY219(a) cavm_cst_cwx_rom_romentry219_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY219(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY219(a) "CST_CWX_ROM_ROMENTRY219"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY219(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY219(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry22
 *
 * CST Cw Rom Romentry22 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry22
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry22_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry22_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry22 cavm_cst_cwx_rom_romentry22_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY22(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY22(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000058ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000058ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000058ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000058ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY22", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY22(a) cavm_cst_cwx_rom_romentry22_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY22(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY22(a) "CST_CWX_ROM_ROMENTRY22"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY22(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY22(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry220
 *
 * CST Cw Rom Romentry220 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry220
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry220_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry220_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry220 cavm_cst_cwx_rom_romentry220_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY220(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY220(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000370ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000370ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000370ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000370ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY220", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY220(a) cavm_cst_cwx_rom_romentry220_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY220(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY220(a) "CST_CWX_ROM_ROMENTRY220"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY220(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY220(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry221
 *
 * CST Cw Rom Romentry221 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry221
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry221_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry221_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry221 cavm_cst_cwx_rom_romentry221_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY221(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY221(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000374ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000374ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000374ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000374ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY221", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY221(a) cavm_cst_cwx_rom_romentry221_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY221(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY221(a) "CST_CWX_ROM_ROMENTRY221"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY221(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY221(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry222
 *
 * CST Cw Rom Romentry222 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry222
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry222_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry222_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry222 cavm_cst_cwx_rom_romentry222_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY222(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY222(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000378ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000378ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000378ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000378ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY222", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY222(a) cavm_cst_cwx_rom_romentry222_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY222(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY222(a) "CST_CWX_ROM_ROMENTRY222"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY222(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY222(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry223
 *
 * CST Cw Rom Romentry223 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry223
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry223_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry223_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry223 cavm_cst_cwx_rom_romentry223_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY223(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY223(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400037cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400037cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400037cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400037cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY223", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY223(a) cavm_cst_cwx_rom_romentry223_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY223(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY223(a) "CST_CWX_ROM_ROMENTRY223"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY223(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY223(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry224
 *
 * CST Cw Rom Romentry224 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry224
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry224_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry224_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry224 cavm_cst_cwx_rom_romentry224_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY224(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY224(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000380ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000380ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000380ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000380ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY224", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY224(a) cavm_cst_cwx_rom_romentry224_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY224(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY224(a) "CST_CWX_ROM_ROMENTRY224"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY224(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY224(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry225
 *
 * CST Cw Rom Romentry225 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry225
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry225_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry225_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry225 cavm_cst_cwx_rom_romentry225_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY225(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY225(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000384ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000384ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000384ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000384ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY225", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY225(a) cavm_cst_cwx_rom_romentry225_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY225(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY225(a) "CST_CWX_ROM_ROMENTRY225"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY225(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY225(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry226
 *
 * CST Cw Rom Romentry226 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry226
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry226_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry226_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry226 cavm_cst_cwx_rom_romentry226_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY226(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY226(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000388ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000388ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000388ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000388ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY226", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY226(a) cavm_cst_cwx_rom_romentry226_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY226(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY226(a) "CST_CWX_ROM_ROMENTRY226"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY226(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY226(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry227
 *
 * CST Cw Rom Romentry227 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry227
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry227_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry227_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry227 cavm_cst_cwx_rom_romentry227_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY227(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY227(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400038cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400038cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400038cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400038cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY227", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY227(a) cavm_cst_cwx_rom_romentry227_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY227(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY227(a) "CST_CWX_ROM_ROMENTRY227"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY227(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY227(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry228
 *
 * CST Cw Rom Romentry228 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry228
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry228_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry228_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry228 cavm_cst_cwx_rom_romentry228_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY228(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY228(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000390ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000390ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000390ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000390ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY228", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY228(a) cavm_cst_cwx_rom_romentry228_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY228(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY228(a) "CST_CWX_ROM_ROMENTRY228"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY228(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY228(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry229
 *
 * CST Cw Rom Romentry229 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry229
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry229_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry229_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry229 cavm_cst_cwx_rom_romentry229_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY229(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY229(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000394ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000394ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000394ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000394ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY229", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY229(a) cavm_cst_cwx_rom_romentry229_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY229(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY229(a) "CST_CWX_ROM_ROMENTRY229"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY229(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY229(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry23
 *
 * CST Cw Rom Romentry23 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry23
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry23_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry23_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry23 cavm_cst_cwx_rom_romentry23_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY23(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY23(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400005cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400005cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400005cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400005cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY23", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY23(a) cavm_cst_cwx_rom_romentry23_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY23(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY23(a) "CST_CWX_ROM_ROMENTRY23"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY23(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY23(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry230
 *
 * CST Cw Rom Romentry230 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry230
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry230_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry230_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry230 cavm_cst_cwx_rom_romentry230_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY230(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY230(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000398ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000398ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000398ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000398ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY230", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY230(a) cavm_cst_cwx_rom_romentry230_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY230(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY230(a) "CST_CWX_ROM_ROMENTRY230"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY230(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY230(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry231
 *
 * CST Cw Rom Romentry231 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry231
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry231_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry231_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry231 cavm_cst_cwx_rom_romentry231_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY231(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY231(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400039cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400039cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400039cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400039cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY231", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY231(a) cavm_cst_cwx_rom_romentry231_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY231(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY231(a) "CST_CWX_ROM_ROMENTRY231"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY231(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY231(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry232
 *
 * CST Cw Rom Romentry232 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry232
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry232_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry232_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry232 cavm_cst_cwx_rom_romentry232_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY232(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY232(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY232", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY232(a) cavm_cst_cwx_rom_romentry232_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY232(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY232(a) "CST_CWX_ROM_ROMENTRY232"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY232(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY232(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry233
 *
 * CST Cw Rom Romentry233 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry233
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry233_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry233_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry233 cavm_cst_cwx_rom_romentry233_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY233(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY233(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY233", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY233(a) cavm_cst_cwx_rom_romentry233_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY233(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY233(a) "CST_CWX_ROM_ROMENTRY233"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY233(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY233(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry234
 *
 * CST Cw Rom Romentry234 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry234
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry234_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry234_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry234 cavm_cst_cwx_rom_romentry234_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY234(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY234(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY234", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY234(a) cavm_cst_cwx_rom_romentry234_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY234(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY234(a) "CST_CWX_ROM_ROMENTRY234"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY234(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY234(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry235
 *
 * CST Cw Rom Romentry235 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry235
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry235_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry235_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry235 cavm_cst_cwx_rom_romentry235_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY235(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY235(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY235", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY235(a) cavm_cst_cwx_rom_romentry235_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY235(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY235(a) "CST_CWX_ROM_ROMENTRY235"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY235(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY235(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry236
 *
 * CST Cw Rom Romentry236 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry236
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry236_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry236_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry236 cavm_cst_cwx_rom_romentry236_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY236(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY236(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY236", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY236(a) cavm_cst_cwx_rom_romentry236_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY236(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY236(a) "CST_CWX_ROM_ROMENTRY236"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY236(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY236(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry237
 *
 * CST Cw Rom Romentry237 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry237
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry237_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry237_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry237 cavm_cst_cwx_rom_romentry237_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY237(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY237(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY237", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY237(a) cavm_cst_cwx_rom_romentry237_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY237(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY237(a) "CST_CWX_ROM_ROMENTRY237"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY237(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY237(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry238
 *
 * CST Cw Rom Romentry238 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry238
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry238_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry238_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry238 cavm_cst_cwx_rom_romentry238_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY238(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY238(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY238", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY238(a) cavm_cst_cwx_rom_romentry238_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY238(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY238(a) "CST_CWX_ROM_ROMENTRY238"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY238(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY238(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry239
 *
 * CST Cw Rom Romentry239 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry239
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry239_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry239_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry239 cavm_cst_cwx_rom_romentry239_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY239(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY239(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY239", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY239(a) cavm_cst_cwx_rom_romentry239_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY239(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY239(a) "CST_CWX_ROM_ROMENTRY239"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY239(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY239(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry24
 *
 * CST Cw Rom Romentry24 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry24
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry24_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry24_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry24 cavm_cst_cwx_rom_romentry24_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY24(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY24(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000060ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000060ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000060ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000060ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY24", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY24(a) cavm_cst_cwx_rom_romentry24_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY24(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY24(a) "CST_CWX_ROM_ROMENTRY24"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY24(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY24(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry240
 *
 * CST Cw Rom Romentry240 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry240
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry240_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry240_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry240 cavm_cst_cwx_rom_romentry240_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY240(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY240(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY240", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY240(a) cavm_cst_cwx_rom_romentry240_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY240(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY240(a) "CST_CWX_ROM_ROMENTRY240"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY240(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY240(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry241
 *
 * CST Cw Rom Romentry241 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry241
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry241_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry241_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry241 cavm_cst_cwx_rom_romentry241_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY241(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY241(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY241", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY241(a) cavm_cst_cwx_rom_romentry241_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY241(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY241(a) "CST_CWX_ROM_ROMENTRY241"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY241(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY241(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry242
 *
 * CST Cw Rom Romentry242 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry242
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry242_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry242_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry242 cavm_cst_cwx_rom_romentry242_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY242(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY242(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY242", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY242(a) cavm_cst_cwx_rom_romentry242_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY242(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY242(a) "CST_CWX_ROM_ROMENTRY242"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY242(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY242(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry243
 *
 * CST Cw Rom Romentry243 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry243
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry243_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry243_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry243 cavm_cst_cwx_rom_romentry243_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY243(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY243(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY243", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY243(a) cavm_cst_cwx_rom_romentry243_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY243(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY243(a) "CST_CWX_ROM_ROMENTRY243"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY243(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY243(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry244
 *
 * CST Cw Rom Romentry244 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry244
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry244_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry244_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry244 cavm_cst_cwx_rom_romentry244_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY244(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY244(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY244", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY244(a) cavm_cst_cwx_rom_romentry244_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY244(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY244(a) "CST_CWX_ROM_ROMENTRY244"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY244(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY244(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry245
 *
 * CST Cw Rom Romentry245 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry245
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry245_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry245_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry245 cavm_cst_cwx_rom_romentry245_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY245(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY245(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY245", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY245(a) cavm_cst_cwx_rom_romentry245_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY245(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY245(a) "CST_CWX_ROM_ROMENTRY245"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY245(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY245(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry246
 *
 * CST Cw Rom Romentry246 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry246
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry246_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry246_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry246 cavm_cst_cwx_rom_romentry246_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY246(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY246(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY246", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY246(a) cavm_cst_cwx_rom_romentry246_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY246(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY246(a) "CST_CWX_ROM_ROMENTRY246"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY246(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY246(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry247
 *
 * CST Cw Rom Romentry247 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry247
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry247_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry247_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry247 cavm_cst_cwx_rom_romentry247_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY247(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY247(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY247", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY247(a) cavm_cst_cwx_rom_romentry247_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY247(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY247(a) "CST_CWX_ROM_ROMENTRY247"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY247(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY247(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry248
 *
 * CST Cw Rom Romentry248 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry248
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry248_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry248_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry248 cavm_cst_cwx_rom_romentry248_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY248(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY248(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY248", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY248(a) cavm_cst_cwx_rom_romentry248_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY248(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY248(a) "CST_CWX_ROM_ROMENTRY248"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY248(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY248(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry249
 *
 * CST Cw Rom Romentry249 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry249
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry249_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry249_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry249 cavm_cst_cwx_rom_romentry249_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY249(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY249(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY249", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY249(a) cavm_cst_cwx_rom_romentry249_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY249(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY249(a) "CST_CWX_ROM_ROMENTRY249"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY249(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY249(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry25
 *
 * CST Cw Rom Romentry25 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry25
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry25_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry25_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry25 cavm_cst_cwx_rom_romentry25_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY25(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY25(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000064ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000064ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000064ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000064ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY25", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY25(a) cavm_cst_cwx_rom_romentry25_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY25(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY25(a) "CST_CWX_ROM_ROMENTRY25"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY25(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY25(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry250
 *
 * CST Cw Rom Romentry250 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry250
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry250_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry250_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry250 cavm_cst_cwx_rom_romentry250_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY250(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY250(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY250", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY250(a) cavm_cst_cwx_rom_romentry250_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY250(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY250(a) "CST_CWX_ROM_ROMENTRY250"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY250(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY250(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry251
 *
 * CST Cw Rom Romentry251 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry251
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry251_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry251_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry251 cavm_cst_cwx_rom_romentry251_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY251(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY251(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY251", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY251(a) cavm_cst_cwx_rom_romentry251_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY251(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY251(a) "CST_CWX_ROM_ROMENTRY251"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY251(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY251(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry252
 *
 * CST Cw Rom Romentry252 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry252
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry252_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry252_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry252 cavm_cst_cwx_rom_romentry252_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY252(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY252(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY252", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY252(a) cavm_cst_cwx_rom_romentry252_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY252(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY252(a) "CST_CWX_ROM_ROMENTRY252"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY252(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY252(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry253
 *
 * CST Cw Rom Romentry253 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry253
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry253_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry253_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry253 cavm_cst_cwx_rom_romentry253_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY253(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY253(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY253", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY253(a) cavm_cst_cwx_rom_romentry253_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY253(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY253(a) "CST_CWX_ROM_ROMENTRY253"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY253(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY253(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry254
 *
 * CST Cw Rom Romentry254 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry254
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry254_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry254_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry254 cavm_cst_cwx_rom_romentry254_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY254(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY254(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY254", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY254(a) cavm_cst_cwx_rom_romentry254_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY254(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY254(a) "CST_CWX_ROM_ROMENTRY254"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY254(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY254(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry255
 *
 * CST Cw Rom Romentry255 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry255
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry255_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry255_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry255 cavm_cst_cwx_rom_romentry255_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY255(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY255(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040003fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040003fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040003fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040003fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY255", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY255(a) cavm_cst_cwx_rom_romentry255_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY255(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY255(a) "CST_CWX_ROM_ROMENTRY255"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY255(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY255(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry256
 *
 * CST Cw Rom Romentry256 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry256
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry256_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry256_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry256 cavm_cst_cwx_rom_romentry256_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY256(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY256(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000400ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000400ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000400ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000400ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY256", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY256(a) cavm_cst_cwx_rom_romentry256_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY256(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY256(a) "CST_CWX_ROM_ROMENTRY256"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY256(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY256(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry257
 *
 * CST Cw Rom Romentry257 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry257
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry257_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry257_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry257 cavm_cst_cwx_rom_romentry257_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY257(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY257(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000404ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000404ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000404ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000404ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY257", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY257(a) cavm_cst_cwx_rom_romentry257_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY257(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY257(a) "CST_CWX_ROM_ROMENTRY257"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY257(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY257(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry258
 *
 * CST Cw Rom Romentry258 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry258
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry258_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry258_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry258 cavm_cst_cwx_rom_romentry258_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY258(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY258(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000408ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000408ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000408ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000408ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY258", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY258(a) cavm_cst_cwx_rom_romentry258_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY258(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY258(a) "CST_CWX_ROM_ROMENTRY258"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY258(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY258(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry259
 *
 * CST Cw Rom Romentry259 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry259
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry259_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry259_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry259 cavm_cst_cwx_rom_romentry259_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY259(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY259(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400040cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400040cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400040cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400040cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY259", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY259(a) cavm_cst_cwx_rom_romentry259_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY259(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY259(a) "CST_CWX_ROM_ROMENTRY259"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY259(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY259(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry26
 *
 * CST Cw Rom Romentry26 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry26
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry26_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry26_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry26 cavm_cst_cwx_rom_romentry26_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY26(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY26(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000068ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000068ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000068ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000068ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY26", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY26(a) cavm_cst_cwx_rom_romentry26_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY26(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY26(a) "CST_CWX_ROM_ROMENTRY26"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY26(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY26(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry260
 *
 * CST Cw Rom Romentry260 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry260
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry260_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry260_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry260 cavm_cst_cwx_rom_romentry260_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY260(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY260(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000410ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000410ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000410ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000410ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY260", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY260(a) cavm_cst_cwx_rom_romentry260_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY260(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY260(a) "CST_CWX_ROM_ROMENTRY260"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY260(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY260(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry261
 *
 * CST Cw Rom Romentry261 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry261
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry261_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry261_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry261 cavm_cst_cwx_rom_romentry261_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY261(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY261(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000414ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000414ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000414ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000414ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY261", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY261(a) cavm_cst_cwx_rom_romentry261_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY261(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY261(a) "CST_CWX_ROM_ROMENTRY261"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY261(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY261(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry262
 *
 * CST Cw Rom Romentry262 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry262
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry262_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry262_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry262 cavm_cst_cwx_rom_romentry262_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY262(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY262(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000418ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000418ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000418ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000418ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY262", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY262(a) cavm_cst_cwx_rom_romentry262_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY262(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY262(a) "CST_CWX_ROM_ROMENTRY262"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY262(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY262(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry263
 *
 * CST Cw Rom Romentry263 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry263
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry263_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry263_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry263 cavm_cst_cwx_rom_romentry263_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY263(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY263(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400041cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400041cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400041cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400041cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY263", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY263(a) cavm_cst_cwx_rom_romentry263_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY263(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY263(a) "CST_CWX_ROM_ROMENTRY263"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY263(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY263(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry264
 *
 * CST Cw Rom Romentry264 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry264
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry264_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry264_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry264 cavm_cst_cwx_rom_romentry264_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY264(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY264(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000420ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000420ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000420ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000420ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY264", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY264(a) cavm_cst_cwx_rom_romentry264_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY264(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY264(a) "CST_CWX_ROM_ROMENTRY264"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY264(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY264(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry265
 *
 * CST Cw Rom Romentry265 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry265
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry265_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry265_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry265 cavm_cst_cwx_rom_romentry265_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY265(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY265(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000424ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000424ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000424ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000424ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY265", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY265(a) cavm_cst_cwx_rom_romentry265_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY265(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY265(a) "CST_CWX_ROM_ROMENTRY265"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY265(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY265(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry266
 *
 * CST Cw Rom Romentry266 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry266
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry266_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry266_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry266 cavm_cst_cwx_rom_romentry266_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY266(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY266(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000428ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000428ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000428ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000428ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY266", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY266(a) cavm_cst_cwx_rom_romentry266_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY266(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY266(a) "CST_CWX_ROM_ROMENTRY266"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY266(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY266(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry267
 *
 * CST Cw Rom Romentry267 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry267
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry267_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry267_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry267 cavm_cst_cwx_rom_romentry267_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY267(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY267(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400042cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400042cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400042cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400042cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY267", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY267(a) cavm_cst_cwx_rom_romentry267_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY267(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY267(a) "CST_CWX_ROM_ROMENTRY267"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY267(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY267(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry268
 *
 * CST Cw Rom Romentry268 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry268
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry268_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry268_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry268 cavm_cst_cwx_rom_romentry268_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY268(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY268(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000430ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000430ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000430ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000430ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY268", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY268(a) cavm_cst_cwx_rom_romentry268_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY268(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY268(a) "CST_CWX_ROM_ROMENTRY268"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY268(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY268(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry269
 *
 * CST Cw Rom Romentry269 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry269
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry269_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry269_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry269 cavm_cst_cwx_rom_romentry269_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY269(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY269(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000434ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000434ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000434ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000434ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY269", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY269(a) cavm_cst_cwx_rom_romentry269_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY269(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY269(a) "CST_CWX_ROM_ROMENTRY269"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY269(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY269(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry27
 *
 * CST Cw Rom Romentry27 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry27
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry27_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry27_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry27 cavm_cst_cwx_rom_romentry27_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY27(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY27(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400006cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400006cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400006cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400006cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY27", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY27(a) cavm_cst_cwx_rom_romentry27_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY27(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY27(a) "CST_CWX_ROM_ROMENTRY27"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY27(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY27(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry270
 *
 * CST Cw Rom Romentry270 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry270
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry270_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry270_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry270 cavm_cst_cwx_rom_romentry270_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY270(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY270(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000438ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000438ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000438ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000438ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY270", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY270(a) cavm_cst_cwx_rom_romentry270_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY270(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY270(a) "CST_CWX_ROM_ROMENTRY270"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY270(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY270(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry271
 *
 * CST Cw Rom Romentry271 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry271
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry271_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry271_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry271 cavm_cst_cwx_rom_romentry271_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY271(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY271(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400043cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400043cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400043cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400043cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY271", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY271(a) cavm_cst_cwx_rom_romentry271_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY271(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY271(a) "CST_CWX_ROM_ROMENTRY271"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY271(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY271(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry272
 *
 * CST Cw Rom Romentry272 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry272
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry272_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry272_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry272 cavm_cst_cwx_rom_romentry272_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY272(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY272(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000440ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000440ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000440ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000440ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY272", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY272(a) cavm_cst_cwx_rom_romentry272_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY272(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY272(a) "CST_CWX_ROM_ROMENTRY272"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY272(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY272(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry273
 *
 * CST Cw Rom Romentry273 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry273
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry273_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry273_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry273 cavm_cst_cwx_rom_romentry273_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY273(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY273(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000444ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000444ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000444ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000444ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY273", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY273(a) cavm_cst_cwx_rom_romentry273_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY273(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY273(a) "CST_CWX_ROM_ROMENTRY273"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY273(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY273(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry274
 *
 * CST Cw Rom Romentry274 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry274
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry274_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry274_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry274 cavm_cst_cwx_rom_romentry274_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY274(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY274(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000448ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000448ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000448ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000448ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY274", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY274(a) cavm_cst_cwx_rom_romentry274_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY274(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY274(a) "CST_CWX_ROM_ROMENTRY274"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY274(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY274(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry275
 *
 * CST Cw Rom Romentry275 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry275
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry275_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry275_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry275 cavm_cst_cwx_rom_romentry275_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY275(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY275(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400044cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400044cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400044cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400044cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY275", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY275(a) cavm_cst_cwx_rom_romentry275_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY275(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY275(a) "CST_CWX_ROM_ROMENTRY275"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY275(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY275(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry276
 *
 * CST Cw Rom Romentry276 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry276
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry276_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry276_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry276 cavm_cst_cwx_rom_romentry276_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY276(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY276(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000450ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000450ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000450ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000450ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY276", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY276(a) cavm_cst_cwx_rom_romentry276_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY276(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY276(a) "CST_CWX_ROM_ROMENTRY276"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY276(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY276(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry277
 *
 * CST Cw Rom Romentry277 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry277
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry277_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry277_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry277 cavm_cst_cwx_rom_romentry277_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY277(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY277(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000454ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000454ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000454ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000454ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY277", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY277(a) cavm_cst_cwx_rom_romentry277_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY277(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY277(a) "CST_CWX_ROM_ROMENTRY277"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY277(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY277(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry278
 *
 * CST Cw Rom Romentry278 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry278
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry278_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry278_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry278 cavm_cst_cwx_rom_romentry278_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY278(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY278(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000458ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000458ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000458ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000458ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY278", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY278(a) cavm_cst_cwx_rom_romentry278_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY278(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY278(a) "CST_CWX_ROM_ROMENTRY278"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY278(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY278(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry279
 *
 * CST Cw Rom Romentry279 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry279
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry279_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry279_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry279 cavm_cst_cwx_rom_romentry279_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY279(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY279(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400045cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400045cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400045cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400045cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY279", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY279(a) cavm_cst_cwx_rom_romentry279_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY279(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY279(a) "CST_CWX_ROM_ROMENTRY279"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY279(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY279(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry28
 *
 * CST Cw Rom Romentry28 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry28
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry28_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry28_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry28 cavm_cst_cwx_rom_romentry28_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY28(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY28(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000070ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000070ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000070ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000070ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY28", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY28(a) cavm_cst_cwx_rom_romentry28_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY28(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY28(a) "CST_CWX_ROM_ROMENTRY28"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY28(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY28(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry280
 *
 * CST Cw Rom Romentry280 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry280
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry280_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry280_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry280 cavm_cst_cwx_rom_romentry280_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY280(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY280(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000460ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000460ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000460ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000460ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY280", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY280(a) cavm_cst_cwx_rom_romentry280_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY280(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY280(a) "CST_CWX_ROM_ROMENTRY280"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY280(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY280(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry281
 *
 * CST Cw Rom Romentry281 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry281
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry281_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry281_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry281 cavm_cst_cwx_rom_romentry281_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY281(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY281(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000464ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000464ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000464ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000464ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY281", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY281(a) cavm_cst_cwx_rom_romentry281_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY281(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY281(a) "CST_CWX_ROM_ROMENTRY281"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY281(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY281(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry282
 *
 * CST Cw Rom Romentry282 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry282
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry282_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry282_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry282 cavm_cst_cwx_rom_romentry282_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY282(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY282(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000468ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000468ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000468ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000468ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY282", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY282(a) cavm_cst_cwx_rom_romentry282_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY282(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY282(a) "CST_CWX_ROM_ROMENTRY282"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY282(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY282(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry283
 *
 * CST Cw Rom Romentry283 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry283
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry283_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry283_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry283 cavm_cst_cwx_rom_romentry283_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY283(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY283(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400046cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400046cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400046cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400046cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY283", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY283(a) cavm_cst_cwx_rom_romentry283_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY283(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY283(a) "CST_CWX_ROM_ROMENTRY283"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY283(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY283(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry284
 *
 * CST Cw Rom Romentry284 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry284
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry284_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry284_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry284 cavm_cst_cwx_rom_romentry284_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY284(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY284(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000470ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000470ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000470ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000470ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY284", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY284(a) cavm_cst_cwx_rom_romentry284_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY284(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY284(a) "CST_CWX_ROM_ROMENTRY284"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY284(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY284(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry285
 *
 * CST Cw Rom Romentry285 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry285
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry285_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry285_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry285 cavm_cst_cwx_rom_romentry285_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY285(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY285(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000474ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000474ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000474ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000474ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY285", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY285(a) cavm_cst_cwx_rom_romentry285_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY285(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY285(a) "CST_CWX_ROM_ROMENTRY285"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY285(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY285(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry286
 *
 * CST Cw Rom Romentry286 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry286
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry286_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry286_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry286 cavm_cst_cwx_rom_romentry286_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY286(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY286(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000478ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000478ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000478ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000478ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY286", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY286(a) cavm_cst_cwx_rom_romentry286_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY286(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY286(a) "CST_CWX_ROM_ROMENTRY286"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY286(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY286(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry287
 *
 * CST Cw Rom Romentry287 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry287
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry287_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry287_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry287 cavm_cst_cwx_rom_romentry287_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY287(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY287(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400047cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400047cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400047cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400047cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY287", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY287(a) cavm_cst_cwx_rom_romentry287_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY287(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY287(a) "CST_CWX_ROM_ROMENTRY287"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY287(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY287(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry288
 *
 * CST Cw Rom Romentry288 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry288
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry288_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry288_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry288 cavm_cst_cwx_rom_romentry288_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY288(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY288(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000480ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000480ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000480ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000480ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY288", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY288(a) cavm_cst_cwx_rom_romentry288_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY288(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY288(a) "CST_CWX_ROM_ROMENTRY288"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY288(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY288(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry289
 *
 * CST Cw Rom Romentry289 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry289
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry289_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry289_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry289 cavm_cst_cwx_rom_romentry289_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY289(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY289(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000484ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000484ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000484ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000484ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY289", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY289(a) cavm_cst_cwx_rom_romentry289_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY289(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY289(a) "CST_CWX_ROM_ROMENTRY289"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY289(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY289(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry29
 *
 * CST Cw Rom Romentry29 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry29
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry29_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry29_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry29 cavm_cst_cwx_rom_romentry29_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY29(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY29(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000074ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000074ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000074ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000074ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY29", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY29(a) cavm_cst_cwx_rom_romentry29_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY29(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY29(a) "CST_CWX_ROM_ROMENTRY29"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY29(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY29(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry290
 *
 * CST Cw Rom Romentry290 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry290
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry290_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry290_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry290 cavm_cst_cwx_rom_romentry290_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY290(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY290(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000488ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000488ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000488ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000488ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY290", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY290(a) cavm_cst_cwx_rom_romentry290_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY290(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY290(a) "CST_CWX_ROM_ROMENTRY290"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY290(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY290(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry291
 *
 * CST Cw Rom Romentry291 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry291
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry291_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry291_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry291 cavm_cst_cwx_rom_romentry291_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY291(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY291(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400048cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400048cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400048cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400048cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY291", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY291(a) cavm_cst_cwx_rom_romentry291_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY291(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY291(a) "CST_CWX_ROM_ROMENTRY291"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY291(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY291(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry292
 *
 * CST Cw Rom Romentry292 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry292
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry292_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry292_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry292 cavm_cst_cwx_rom_romentry292_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY292(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY292(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000490ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000490ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000490ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000490ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY292", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY292(a) cavm_cst_cwx_rom_romentry292_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY292(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY292(a) "CST_CWX_ROM_ROMENTRY292"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY292(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY292(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry293
 *
 * CST Cw Rom Romentry293 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry293
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry293_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry293_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry293 cavm_cst_cwx_rom_romentry293_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY293(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY293(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000494ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000494ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000494ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000494ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY293", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY293(a) cavm_cst_cwx_rom_romentry293_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY293(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY293(a) "CST_CWX_ROM_ROMENTRY293"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY293(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY293(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry294
 *
 * CST Cw Rom Romentry294 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry294
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry294_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry294_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry294 cavm_cst_cwx_rom_romentry294_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY294(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY294(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000498ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000498ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000498ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000498ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY294", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY294(a) cavm_cst_cwx_rom_romentry294_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY294(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY294(a) "CST_CWX_ROM_ROMENTRY294"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY294(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY294(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry295
 *
 * CST Cw Rom Romentry295 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry295
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry295_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry295_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry295 cavm_cst_cwx_rom_romentry295_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY295(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY295(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400049cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400049cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400049cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400049cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY295", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY295(a) cavm_cst_cwx_rom_romentry295_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY295(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY295(a) "CST_CWX_ROM_ROMENTRY295"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY295(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY295(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry296
 *
 * CST Cw Rom Romentry296 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry296
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry296_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry296_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry296 cavm_cst_cwx_rom_romentry296_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY296(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY296(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY296", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY296(a) cavm_cst_cwx_rom_romentry296_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY296(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY296(a) "CST_CWX_ROM_ROMENTRY296"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY296(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY296(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry297
 *
 * CST Cw Rom Romentry297 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry297
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry297_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry297_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry297 cavm_cst_cwx_rom_romentry297_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY297(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY297(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY297", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY297(a) cavm_cst_cwx_rom_romentry297_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY297(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY297(a) "CST_CWX_ROM_ROMENTRY297"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY297(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY297(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry298
 *
 * CST Cw Rom Romentry298 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry298
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry298_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry298_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry298 cavm_cst_cwx_rom_romentry298_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY298(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY298(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY298", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY298(a) cavm_cst_cwx_rom_romentry298_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY298(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY298(a) "CST_CWX_ROM_ROMENTRY298"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY298(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY298(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry299
 *
 * CST Cw Rom Romentry299 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry299
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry299_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry299_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry299 cavm_cst_cwx_rom_romentry299_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY299(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY299(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY299", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY299(a) cavm_cst_cwx_rom_romentry299_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY299(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY299(a) "CST_CWX_ROM_ROMENTRY299"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY299(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY299(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry3
 *
 * CST Cw Rom Romentry3 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry3
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry3_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry3_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry3 cavm_cst_cwx_rom_romentry3_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY3(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY3(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400000cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400000cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400000cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400000cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY3", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY3(a) cavm_cst_cwx_rom_romentry3_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY3(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY3(a) "CST_CWX_ROM_ROMENTRY3"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY3(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY3(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry30
 *
 * CST Cw Rom Romentry30 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry30
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry30_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry30_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry30 cavm_cst_cwx_rom_romentry30_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY30(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY30(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000078ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000078ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000078ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000078ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY30", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY30(a) cavm_cst_cwx_rom_romentry30_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY30(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY30(a) "CST_CWX_ROM_ROMENTRY30"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY30(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY30(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry300
 *
 * CST Cw Rom Romentry300 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry300
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry300_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry300_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry300 cavm_cst_cwx_rom_romentry300_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY300(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY300(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY300", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY300(a) cavm_cst_cwx_rom_romentry300_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY300(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY300(a) "CST_CWX_ROM_ROMENTRY300"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY300(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY300(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry301
 *
 * CST Cw Rom Romentry301 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry301
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry301_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry301_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry301 cavm_cst_cwx_rom_romentry301_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY301(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY301(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY301", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY301(a) cavm_cst_cwx_rom_romentry301_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY301(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY301(a) "CST_CWX_ROM_ROMENTRY301"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY301(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY301(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry302
 *
 * CST Cw Rom Romentry302 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry302
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry302_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry302_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry302 cavm_cst_cwx_rom_romentry302_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY302(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY302(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY302", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY302(a) cavm_cst_cwx_rom_romentry302_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY302(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY302(a) "CST_CWX_ROM_ROMENTRY302"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY302(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY302(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry303
 *
 * CST Cw Rom Romentry303 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry303
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry303_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry303_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry303 cavm_cst_cwx_rom_romentry303_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY303(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY303(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY303", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY303(a) cavm_cst_cwx_rom_romentry303_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY303(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY303(a) "CST_CWX_ROM_ROMENTRY303"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY303(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY303(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry304
 *
 * CST Cw Rom Romentry304 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry304
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry304_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry304_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry304 cavm_cst_cwx_rom_romentry304_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY304(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY304(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY304", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY304(a) cavm_cst_cwx_rom_romentry304_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY304(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY304(a) "CST_CWX_ROM_ROMENTRY304"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY304(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY304(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry305
 *
 * CST Cw Rom Romentry305 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry305
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry305_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry305_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry305 cavm_cst_cwx_rom_romentry305_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY305(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY305(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY305", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY305(a) cavm_cst_cwx_rom_romentry305_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY305(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY305(a) "CST_CWX_ROM_ROMENTRY305"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY305(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY305(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry306
 *
 * CST Cw Rom Romentry306 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry306
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry306_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry306_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry306 cavm_cst_cwx_rom_romentry306_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY306(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY306(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY306", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY306(a) cavm_cst_cwx_rom_romentry306_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY306(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY306(a) "CST_CWX_ROM_ROMENTRY306"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY306(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY306(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry307
 *
 * CST Cw Rom Romentry307 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry307
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry307_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry307_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry307 cavm_cst_cwx_rom_romentry307_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY307(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY307(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY307", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY307(a) cavm_cst_cwx_rom_romentry307_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY307(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY307(a) "CST_CWX_ROM_ROMENTRY307"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY307(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY307(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry308
 *
 * CST Cw Rom Romentry308 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry308
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry308_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry308_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry308 cavm_cst_cwx_rom_romentry308_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY308(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY308(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY308", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY308(a) cavm_cst_cwx_rom_romentry308_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY308(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY308(a) "CST_CWX_ROM_ROMENTRY308"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY308(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY308(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry309
 *
 * CST Cw Rom Romentry309 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry309
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry309_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry309_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry309 cavm_cst_cwx_rom_romentry309_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY309(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY309(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY309", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY309(a) cavm_cst_cwx_rom_romentry309_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY309(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY309(a) "CST_CWX_ROM_ROMENTRY309"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY309(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY309(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry31
 *
 * CST Cw Rom Romentry31 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry31
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry31_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry31_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry31 cavm_cst_cwx_rom_romentry31_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY31(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY31(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400007cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400007cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400007cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400007cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY31", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY31(a) cavm_cst_cwx_rom_romentry31_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY31(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY31(a) "CST_CWX_ROM_ROMENTRY31"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY31(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY31(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry310
 *
 * CST Cw Rom Romentry310 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry310
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry310_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry310_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry310 cavm_cst_cwx_rom_romentry310_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY310(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY310(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY310", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY310(a) cavm_cst_cwx_rom_romentry310_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY310(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY310(a) "CST_CWX_ROM_ROMENTRY310"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY310(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY310(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry311
 *
 * CST Cw Rom Romentry311 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry311
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry311_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry311_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry311 cavm_cst_cwx_rom_romentry311_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY311(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY311(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY311", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY311(a) cavm_cst_cwx_rom_romentry311_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY311(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY311(a) "CST_CWX_ROM_ROMENTRY311"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY311(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY311(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry312
 *
 * CST Cw Rom Romentry312 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry312
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry312_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry312_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry312 cavm_cst_cwx_rom_romentry312_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY312(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY312(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY312", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY312(a) cavm_cst_cwx_rom_romentry312_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY312(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY312(a) "CST_CWX_ROM_ROMENTRY312"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY312(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY312(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry313
 *
 * CST Cw Rom Romentry313 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry313
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry313_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry313_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry313 cavm_cst_cwx_rom_romentry313_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY313(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY313(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY313", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY313(a) cavm_cst_cwx_rom_romentry313_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY313(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY313(a) "CST_CWX_ROM_ROMENTRY313"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY313(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY313(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry314
 *
 * CST Cw Rom Romentry314 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry314
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry314_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry314_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry314 cavm_cst_cwx_rom_romentry314_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY314(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY314(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY314", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY314(a) cavm_cst_cwx_rom_romentry314_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY314(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY314(a) "CST_CWX_ROM_ROMENTRY314"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY314(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY314(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry315
 *
 * CST Cw Rom Romentry315 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry315
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry315_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry315_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry315 cavm_cst_cwx_rom_romentry315_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY315(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY315(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY315", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY315(a) cavm_cst_cwx_rom_romentry315_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY315(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY315(a) "CST_CWX_ROM_ROMENTRY315"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY315(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY315(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry316
 *
 * CST Cw Rom Romentry316 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry316
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry316_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry316_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry316 cavm_cst_cwx_rom_romentry316_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY316(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY316(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY316", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY316(a) cavm_cst_cwx_rom_romentry316_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY316(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY316(a) "CST_CWX_ROM_ROMENTRY316"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY316(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY316(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry317
 *
 * CST Cw Rom Romentry317 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry317
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry317_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry317_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry317 cavm_cst_cwx_rom_romentry317_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY317(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY317(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY317", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY317(a) cavm_cst_cwx_rom_romentry317_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY317(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY317(a) "CST_CWX_ROM_ROMENTRY317"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY317(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY317(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry318
 *
 * CST Cw Rom Romentry318 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry318
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry318_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry318_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry318 cavm_cst_cwx_rom_romentry318_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY318(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY318(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY318", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY318(a) cavm_cst_cwx_rom_romentry318_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY318(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY318(a) "CST_CWX_ROM_ROMENTRY318"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY318(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY318(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry319
 *
 * CST Cw Rom Romentry319 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry319
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry319_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry319_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry319 cavm_cst_cwx_rom_romentry319_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY319(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY319(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040004fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040004fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040004fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040004fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY319", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY319(a) cavm_cst_cwx_rom_romentry319_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY319(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY319(a) "CST_CWX_ROM_ROMENTRY319"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY319(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY319(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry32
 *
 * CST Cw Rom Romentry32 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry32
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry32_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry32_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry32 cavm_cst_cwx_rom_romentry32_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY32(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY32(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000080ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000080ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000080ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000080ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY32", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY32(a) cavm_cst_cwx_rom_romentry32_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY32(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY32(a) "CST_CWX_ROM_ROMENTRY32"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY32(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY32(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry320
 *
 * CST Cw Rom Romentry320 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry320
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry320_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry320_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry320 cavm_cst_cwx_rom_romentry320_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY320(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY320(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000500ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000500ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000500ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000500ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY320", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY320(a) cavm_cst_cwx_rom_romentry320_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY320(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY320(a) "CST_CWX_ROM_ROMENTRY320"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY320(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY320(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry321
 *
 * CST Cw Rom Romentry321 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry321
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry321_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry321_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry321 cavm_cst_cwx_rom_romentry321_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY321(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY321(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000504ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000504ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000504ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000504ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY321", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY321(a) cavm_cst_cwx_rom_romentry321_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY321(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY321(a) "CST_CWX_ROM_ROMENTRY321"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY321(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY321(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry322
 *
 * CST Cw Rom Romentry322 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry322
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry322_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry322_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry322 cavm_cst_cwx_rom_romentry322_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY322(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY322(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000508ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000508ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000508ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000508ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY322", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY322(a) cavm_cst_cwx_rom_romentry322_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY322(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY322(a) "CST_CWX_ROM_ROMENTRY322"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY322(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY322(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry323
 *
 * CST Cw Rom Romentry323 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry323
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry323_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry323_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry323 cavm_cst_cwx_rom_romentry323_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY323(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY323(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400050cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400050cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400050cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400050cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY323", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY323(a) cavm_cst_cwx_rom_romentry323_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY323(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY323(a) "CST_CWX_ROM_ROMENTRY323"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY323(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY323(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry324
 *
 * CST Cw Rom Romentry324 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry324
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry324_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry324_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry324 cavm_cst_cwx_rom_romentry324_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY324(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY324(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000510ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000510ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000510ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000510ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY324", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY324(a) cavm_cst_cwx_rom_romentry324_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY324(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY324(a) "CST_CWX_ROM_ROMENTRY324"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY324(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY324(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry325
 *
 * CST Cw Rom Romentry325 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry325
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry325_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry325_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry325 cavm_cst_cwx_rom_romentry325_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY325(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY325(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000514ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000514ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000514ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000514ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY325", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY325(a) cavm_cst_cwx_rom_romentry325_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY325(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY325(a) "CST_CWX_ROM_ROMENTRY325"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY325(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY325(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry326
 *
 * CST Cw Rom Romentry326 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry326
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry326_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry326_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry326 cavm_cst_cwx_rom_romentry326_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY326(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY326(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000518ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000518ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000518ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000518ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY326", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY326(a) cavm_cst_cwx_rom_romentry326_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY326(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY326(a) "CST_CWX_ROM_ROMENTRY326"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY326(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY326(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry327
 *
 * CST Cw Rom Romentry327 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry327
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry327_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry327_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry327 cavm_cst_cwx_rom_romentry327_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY327(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY327(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400051cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400051cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400051cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400051cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY327", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY327(a) cavm_cst_cwx_rom_romentry327_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY327(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY327(a) "CST_CWX_ROM_ROMENTRY327"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY327(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY327(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry328
 *
 * CST Cw Rom Romentry328 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry328
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry328_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry328_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry328 cavm_cst_cwx_rom_romentry328_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY328(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY328(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000520ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000520ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000520ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000520ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY328", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY328(a) cavm_cst_cwx_rom_romentry328_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY328(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY328(a) "CST_CWX_ROM_ROMENTRY328"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY328(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY328(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry329
 *
 * CST Cw Rom Romentry329 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry329
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry329_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry329_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry329 cavm_cst_cwx_rom_romentry329_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY329(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY329(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000524ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000524ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000524ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000524ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY329", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY329(a) cavm_cst_cwx_rom_romentry329_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY329(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY329(a) "CST_CWX_ROM_ROMENTRY329"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY329(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY329(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry33
 *
 * CST Cw Rom Romentry33 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry33
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry33_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry33_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry33 cavm_cst_cwx_rom_romentry33_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY33(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY33(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000084ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000084ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000084ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000084ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY33", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY33(a) cavm_cst_cwx_rom_romentry33_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY33(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY33(a) "CST_CWX_ROM_ROMENTRY33"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY33(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY33(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry330
 *
 * CST Cw Rom Romentry330 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry330
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry330_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry330_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry330 cavm_cst_cwx_rom_romentry330_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY330(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY330(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000528ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000528ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000528ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000528ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY330", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY330(a) cavm_cst_cwx_rom_romentry330_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY330(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY330(a) "CST_CWX_ROM_ROMENTRY330"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY330(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY330(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry331
 *
 * CST Cw Rom Romentry331 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry331
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry331_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry331_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry331 cavm_cst_cwx_rom_romentry331_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY331(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY331(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400052cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400052cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400052cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400052cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY331", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY331(a) cavm_cst_cwx_rom_romentry331_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY331(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY331(a) "CST_CWX_ROM_ROMENTRY331"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY331(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY331(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry332
 *
 * CST Cw Rom Romentry332 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry332
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry332_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry332_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry332 cavm_cst_cwx_rom_romentry332_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY332(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY332(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000530ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000530ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000530ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000530ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY332", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY332(a) cavm_cst_cwx_rom_romentry332_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY332(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY332(a) "CST_CWX_ROM_ROMENTRY332"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY332(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY332(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry333
 *
 * CST Cw Rom Romentry333 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry333
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry333_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry333_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry333 cavm_cst_cwx_rom_romentry333_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY333(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY333(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000534ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000534ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000534ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000534ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY333", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY333(a) cavm_cst_cwx_rom_romentry333_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY333(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY333(a) "CST_CWX_ROM_ROMENTRY333"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY333(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY333(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry334
 *
 * CST Cw Rom Romentry334 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry334
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry334_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry334_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry334 cavm_cst_cwx_rom_romentry334_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY334(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY334(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000538ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000538ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000538ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000538ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY334", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY334(a) cavm_cst_cwx_rom_romentry334_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY334(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY334(a) "CST_CWX_ROM_ROMENTRY334"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY334(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY334(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry335
 *
 * CST Cw Rom Romentry335 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry335
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry335_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry335_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry335 cavm_cst_cwx_rom_romentry335_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY335(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY335(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400053cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400053cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400053cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400053cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY335", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY335(a) cavm_cst_cwx_rom_romentry335_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY335(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY335(a) "CST_CWX_ROM_ROMENTRY335"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY335(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY335(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry336
 *
 * CST Cw Rom Romentry336 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry336
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry336_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry336_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry336 cavm_cst_cwx_rom_romentry336_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY336(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY336(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000540ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000540ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000540ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000540ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY336", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY336(a) cavm_cst_cwx_rom_romentry336_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY336(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY336(a) "CST_CWX_ROM_ROMENTRY336"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY336(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY336(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry337
 *
 * CST Cw Rom Romentry337 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry337
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry337_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry337_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry337 cavm_cst_cwx_rom_romentry337_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY337(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY337(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000544ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000544ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000544ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000544ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY337", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY337(a) cavm_cst_cwx_rom_romentry337_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY337(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY337(a) "CST_CWX_ROM_ROMENTRY337"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY337(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY337(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry338
 *
 * CST Cw Rom Romentry338 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry338
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry338_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry338_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry338 cavm_cst_cwx_rom_romentry338_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY338(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY338(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000548ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000548ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000548ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000548ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY338", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY338(a) cavm_cst_cwx_rom_romentry338_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY338(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY338(a) "CST_CWX_ROM_ROMENTRY338"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY338(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY338(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry339
 *
 * CST Cw Rom Romentry339 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry339
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry339_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry339_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry339 cavm_cst_cwx_rom_romentry339_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY339(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY339(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400054cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400054cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400054cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400054cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY339", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY339(a) cavm_cst_cwx_rom_romentry339_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY339(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY339(a) "CST_CWX_ROM_ROMENTRY339"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY339(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY339(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry34
 *
 * CST Cw Rom Romentry34 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry34
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry34_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry34_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry34 cavm_cst_cwx_rom_romentry34_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY34(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY34(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000088ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000088ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000088ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000088ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY34", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY34(a) cavm_cst_cwx_rom_romentry34_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY34(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY34(a) "CST_CWX_ROM_ROMENTRY34"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY34(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY34(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry340
 *
 * CST Cw Rom Romentry340 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry340
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry340_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry340_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry340 cavm_cst_cwx_rom_romentry340_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY340(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY340(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000550ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000550ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000550ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000550ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY340", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY340(a) cavm_cst_cwx_rom_romentry340_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY340(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY340(a) "CST_CWX_ROM_ROMENTRY340"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY340(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY340(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry341
 *
 * CST Cw Rom Romentry341 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry341
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry341_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry341_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry341 cavm_cst_cwx_rom_romentry341_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY341(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY341(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000554ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000554ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000554ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000554ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY341", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY341(a) cavm_cst_cwx_rom_romentry341_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY341(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY341(a) "CST_CWX_ROM_ROMENTRY341"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY341(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY341(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry342
 *
 * CST Cw Rom Romentry342 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry342
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry342_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry342_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry342 cavm_cst_cwx_rom_romentry342_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY342(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY342(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000558ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000558ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000558ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000558ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY342", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY342(a) cavm_cst_cwx_rom_romentry342_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY342(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY342(a) "CST_CWX_ROM_ROMENTRY342"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY342(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY342(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry343
 *
 * CST Cw Rom Romentry343 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry343
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry343_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry343_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry343 cavm_cst_cwx_rom_romentry343_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY343(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY343(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400055cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400055cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400055cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400055cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY343", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY343(a) cavm_cst_cwx_rom_romentry343_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY343(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY343(a) "CST_CWX_ROM_ROMENTRY343"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY343(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY343(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry344
 *
 * CST Cw Rom Romentry344 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry344
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry344_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry344_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry344 cavm_cst_cwx_rom_romentry344_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY344(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY344(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000560ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000560ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000560ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000560ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY344", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY344(a) cavm_cst_cwx_rom_romentry344_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY344(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY344(a) "CST_CWX_ROM_ROMENTRY344"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY344(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY344(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry345
 *
 * CST Cw Rom Romentry345 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry345
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry345_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry345_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry345 cavm_cst_cwx_rom_romentry345_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY345(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY345(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000564ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000564ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000564ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000564ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY345", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY345(a) cavm_cst_cwx_rom_romentry345_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY345(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY345(a) "CST_CWX_ROM_ROMENTRY345"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY345(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY345(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry346
 *
 * CST Cw Rom Romentry346 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry346
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry346_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry346_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry346 cavm_cst_cwx_rom_romentry346_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY346(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY346(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000568ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000568ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000568ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000568ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY346", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY346(a) cavm_cst_cwx_rom_romentry346_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY346(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY346(a) "CST_CWX_ROM_ROMENTRY346"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY346(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY346(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry347
 *
 * CST Cw Rom Romentry347 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry347
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry347_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry347_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry347 cavm_cst_cwx_rom_romentry347_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY347(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY347(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400056cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400056cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400056cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400056cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY347", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY347(a) cavm_cst_cwx_rom_romentry347_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY347(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY347(a) "CST_CWX_ROM_ROMENTRY347"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY347(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY347(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry348
 *
 * CST Cw Rom Romentry348 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry348
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry348_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry348_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry348 cavm_cst_cwx_rom_romentry348_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY348(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY348(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000570ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000570ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000570ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000570ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY348", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY348(a) cavm_cst_cwx_rom_romentry348_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY348(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY348(a) "CST_CWX_ROM_ROMENTRY348"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY348(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY348(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry349
 *
 * CST Cw Rom Romentry349 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry349
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry349_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry349_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry349 cavm_cst_cwx_rom_romentry349_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY349(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY349(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000574ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000574ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000574ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000574ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY349", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY349(a) cavm_cst_cwx_rom_romentry349_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY349(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY349(a) "CST_CWX_ROM_ROMENTRY349"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY349(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY349(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry35
 *
 * CST Cw Rom Romentry35 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry35
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry35_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry35_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry35 cavm_cst_cwx_rom_romentry35_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY35(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY35(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400008cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400008cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400008cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400008cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY35", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY35(a) cavm_cst_cwx_rom_romentry35_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY35(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY35(a) "CST_CWX_ROM_ROMENTRY35"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY35(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY35(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry350
 *
 * CST Cw Rom Romentry350 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry350
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry350_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry350_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry350 cavm_cst_cwx_rom_romentry350_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY350(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY350(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000578ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000578ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000578ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000578ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY350", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY350(a) cavm_cst_cwx_rom_romentry350_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY350(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY350(a) "CST_CWX_ROM_ROMENTRY350"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY350(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY350(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry351
 *
 * CST Cw Rom Romentry351 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry351
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry351_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry351_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry351 cavm_cst_cwx_rom_romentry351_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY351(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY351(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400057cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400057cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400057cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400057cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY351", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY351(a) cavm_cst_cwx_rom_romentry351_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY351(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY351(a) "CST_CWX_ROM_ROMENTRY351"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY351(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY351(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry352
 *
 * CST Cw Rom Romentry352 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry352
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry352_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry352_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry352 cavm_cst_cwx_rom_romentry352_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY352(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY352(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000580ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000580ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000580ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000580ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY352", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY352(a) cavm_cst_cwx_rom_romentry352_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY352(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY352(a) "CST_CWX_ROM_ROMENTRY352"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY352(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY352(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry353
 *
 * CST Cw Rom Romentry353 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry353
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry353_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry353_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry353 cavm_cst_cwx_rom_romentry353_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY353(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY353(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000584ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000584ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000584ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000584ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY353", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY353(a) cavm_cst_cwx_rom_romentry353_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY353(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY353(a) "CST_CWX_ROM_ROMENTRY353"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY353(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY353(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry354
 *
 * CST Cw Rom Romentry354 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry354
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry354_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry354_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry354 cavm_cst_cwx_rom_romentry354_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY354(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY354(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000588ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000588ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000588ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000588ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY354", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY354(a) cavm_cst_cwx_rom_romentry354_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY354(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY354(a) "CST_CWX_ROM_ROMENTRY354"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY354(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY354(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry355
 *
 * CST Cw Rom Romentry355 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry355
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry355_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry355_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry355 cavm_cst_cwx_rom_romentry355_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY355(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY355(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400058cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400058cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400058cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400058cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY355", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY355(a) cavm_cst_cwx_rom_romentry355_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY355(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY355(a) "CST_CWX_ROM_ROMENTRY355"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY355(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY355(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry356
 *
 * CST Cw Rom Romentry356 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry356
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry356_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry356_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry356 cavm_cst_cwx_rom_romentry356_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY356(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY356(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000590ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000590ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000590ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000590ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY356", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY356(a) cavm_cst_cwx_rom_romentry356_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY356(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY356(a) "CST_CWX_ROM_ROMENTRY356"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY356(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY356(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry357
 *
 * CST Cw Rom Romentry357 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry357
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry357_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry357_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry357 cavm_cst_cwx_rom_romentry357_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY357(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY357(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000594ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000594ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000594ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000594ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY357", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY357(a) cavm_cst_cwx_rom_romentry357_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY357(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY357(a) "CST_CWX_ROM_ROMENTRY357"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY357(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY357(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry358
 *
 * CST Cw Rom Romentry358 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry358
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry358_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry358_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry358 cavm_cst_cwx_rom_romentry358_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY358(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY358(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000598ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000598ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000598ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000598ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY358", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY358(a) cavm_cst_cwx_rom_romentry358_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY358(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY358(a) "CST_CWX_ROM_ROMENTRY358"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY358(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY358(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry359
 *
 * CST Cw Rom Romentry359 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry359
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry359_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry359_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry359 cavm_cst_cwx_rom_romentry359_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY359(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY359(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400059cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400059cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400059cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400059cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY359", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY359(a) cavm_cst_cwx_rom_romentry359_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY359(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY359(a) "CST_CWX_ROM_ROMENTRY359"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY359(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY359(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry36
 *
 * CST Cw Rom Romentry36 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry36
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry36_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry36_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry36 cavm_cst_cwx_rom_romentry36_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY36(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY36(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000090ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000090ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000090ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000090ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY36", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY36(a) cavm_cst_cwx_rom_romentry36_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY36(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY36(a) "CST_CWX_ROM_ROMENTRY36"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY36(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY36(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry360
 *
 * CST Cw Rom Romentry360 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry360
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry360_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry360_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry360 cavm_cst_cwx_rom_romentry360_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY360(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY360(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY360", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY360(a) cavm_cst_cwx_rom_romentry360_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY360(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY360(a) "CST_CWX_ROM_ROMENTRY360"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY360(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY360(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry361
 *
 * CST Cw Rom Romentry361 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry361
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry361_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry361_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry361 cavm_cst_cwx_rom_romentry361_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY361(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY361(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY361", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY361(a) cavm_cst_cwx_rom_romentry361_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY361(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY361(a) "CST_CWX_ROM_ROMENTRY361"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY361(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY361(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry362
 *
 * CST Cw Rom Romentry362 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry362
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry362_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry362_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry362 cavm_cst_cwx_rom_romentry362_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY362(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY362(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY362", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY362(a) cavm_cst_cwx_rom_romentry362_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY362(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY362(a) "CST_CWX_ROM_ROMENTRY362"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY362(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY362(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry363
 *
 * CST Cw Rom Romentry363 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry363
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry363_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry363_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry363 cavm_cst_cwx_rom_romentry363_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY363(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY363(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY363", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY363(a) cavm_cst_cwx_rom_romentry363_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY363(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY363(a) "CST_CWX_ROM_ROMENTRY363"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY363(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY363(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry364
 *
 * CST Cw Rom Romentry364 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry364
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry364_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry364_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry364 cavm_cst_cwx_rom_romentry364_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY364(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY364(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY364", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY364(a) cavm_cst_cwx_rom_romentry364_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY364(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY364(a) "CST_CWX_ROM_ROMENTRY364"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY364(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY364(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry365
 *
 * CST Cw Rom Romentry365 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry365
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry365_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry365_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry365 cavm_cst_cwx_rom_romentry365_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY365(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY365(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY365", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY365(a) cavm_cst_cwx_rom_romentry365_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY365(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY365(a) "CST_CWX_ROM_ROMENTRY365"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY365(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY365(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry366
 *
 * CST Cw Rom Romentry366 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry366
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry366_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry366_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry366 cavm_cst_cwx_rom_romentry366_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY366(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY366(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY366", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY366(a) cavm_cst_cwx_rom_romentry366_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY366(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY366(a) "CST_CWX_ROM_ROMENTRY366"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY366(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY366(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry367
 *
 * CST Cw Rom Romentry367 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry367
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry367_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry367_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry367 cavm_cst_cwx_rom_romentry367_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY367(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY367(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY367", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY367(a) cavm_cst_cwx_rom_romentry367_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY367(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY367(a) "CST_CWX_ROM_ROMENTRY367"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY367(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY367(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry368
 *
 * CST Cw Rom Romentry368 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry368
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry368_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry368_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry368 cavm_cst_cwx_rom_romentry368_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY368(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY368(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY368", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY368(a) cavm_cst_cwx_rom_romentry368_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY368(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY368(a) "CST_CWX_ROM_ROMENTRY368"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY368(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY368(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry369
 *
 * CST Cw Rom Romentry369 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry369
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry369_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry369_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry369 cavm_cst_cwx_rom_romentry369_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY369(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY369(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY369", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY369(a) cavm_cst_cwx_rom_romentry369_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY369(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY369(a) "CST_CWX_ROM_ROMENTRY369"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY369(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY369(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry37
 *
 * CST Cw Rom Romentry37 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry37
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry37_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry37_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry37 cavm_cst_cwx_rom_romentry37_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY37(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY37(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000094ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000094ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000094ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000094ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY37", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY37(a) cavm_cst_cwx_rom_romentry37_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY37(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY37(a) "CST_CWX_ROM_ROMENTRY37"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY37(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY37(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry370
 *
 * CST Cw Rom Romentry370 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry370
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry370_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry370_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry370 cavm_cst_cwx_rom_romentry370_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY370(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY370(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY370", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY370(a) cavm_cst_cwx_rom_romentry370_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY370(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY370(a) "CST_CWX_ROM_ROMENTRY370"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY370(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY370(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry371
 *
 * CST Cw Rom Romentry371 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry371
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry371_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry371_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry371 cavm_cst_cwx_rom_romentry371_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY371(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY371(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY371", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY371(a) cavm_cst_cwx_rom_romentry371_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY371(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY371(a) "CST_CWX_ROM_ROMENTRY371"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY371(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY371(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry372
 *
 * CST Cw Rom Romentry372 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry372
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry372_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry372_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry372 cavm_cst_cwx_rom_romentry372_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY372(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY372(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY372", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY372(a) cavm_cst_cwx_rom_romentry372_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY372(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY372(a) "CST_CWX_ROM_ROMENTRY372"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY372(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY372(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry373
 *
 * CST Cw Rom Romentry373 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry373
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry373_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry373_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry373 cavm_cst_cwx_rom_romentry373_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY373(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY373(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY373", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY373(a) cavm_cst_cwx_rom_romentry373_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY373(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY373(a) "CST_CWX_ROM_ROMENTRY373"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY373(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY373(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry374
 *
 * CST Cw Rom Romentry374 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry374
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry374_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry374_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry374 cavm_cst_cwx_rom_romentry374_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY374(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY374(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY374", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY374(a) cavm_cst_cwx_rom_romentry374_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY374(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY374(a) "CST_CWX_ROM_ROMENTRY374"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY374(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY374(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry375
 *
 * CST Cw Rom Romentry375 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry375
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry375_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry375_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry375 cavm_cst_cwx_rom_romentry375_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY375(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY375(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY375", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY375(a) cavm_cst_cwx_rom_romentry375_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY375(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY375(a) "CST_CWX_ROM_ROMENTRY375"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY375(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY375(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry376
 *
 * CST Cw Rom Romentry376 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry376
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry376_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry376_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry376 cavm_cst_cwx_rom_romentry376_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY376(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY376(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY376", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY376(a) cavm_cst_cwx_rom_romentry376_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY376(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY376(a) "CST_CWX_ROM_ROMENTRY376"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY376(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY376(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry377
 *
 * CST Cw Rom Romentry377 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry377
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry377_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry377_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry377 cavm_cst_cwx_rom_romentry377_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY377(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY377(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY377", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY377(a) cavm_cst_cwx_rom_romentry377_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY377(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY377(a) "CST_CWX_ROM_ROMENTRY377"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY377(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY377(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry378
 *
 * CST Cw Rom Romentry378 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry378
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry378_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry378_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry378 cavm_cst_cwx_rom_romentry378_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY378(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY378(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY378", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY378(a) cavm_cst_cwx_rom_romentry378_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY378(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY378(a) "CST_CWX_ROM_ROMENTRY378"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY378(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY378(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry379
 *
 * CST Cw Rom Romentry379 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry379
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry379_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry379_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry379 cavm_cst_cwx_rom_romentry379_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY379(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY379(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY379", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY379(a) cavm_cst_cwx_rom_romentry379_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY379(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY379(a) "CST_CWX_ROM_ROMENTRY379"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY379(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY379(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry38
 *
 * CST Cw Rom Romentry38 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry38
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry38_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry38_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry38 cavm_cst_cwx_rom_romentry38_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY38(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY38(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000098ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000098ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000098ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000098ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY38", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY38(a) cavm_cst_cwx_rom_romentry38_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY38(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY38(a) "CST_CWX_ROM_ROMENTRY38"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY38(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY38(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry380
 *
 * CST Cw Rom Romentry380 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry380
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry380_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry380_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry380 cavm_cst_cwx_rom_romentry380_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY380(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY380(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY380", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY380(a) cavm_cst_cwx_rom_romentry380_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY380(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY380(a) "CST_CWX_ROM_ROMENTRY380"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY380(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY380(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry381
 *
 * CST Cw Rom Romentry381 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry381
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry381_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry381_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry381 cavm_cst_cwx_rom_romentry381_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY381(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY381(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY381", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY381(a) cavm_cst_cwx_rom_romentry381_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY381(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY381(a) "CST_CWX_ROM_ROMENTRY381"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY381(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY381(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry382
 *
 * CST Cw Rom Romentry382 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry382
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry382_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry382_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry382 cavm_cst_cwx_rom_romentry382_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY382(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY382(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY382", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY382(a) cavm_cst_cwx_rom_romentry382_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY382(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY382(a) "CST_CWX_ROM_ROMENTRY382"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY382(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY382(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry383
 *
 * CST Cw Rom Romentry383 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry383
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry383_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry383_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry383 cavm_cst_cwx_rom_romentry383_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY383(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY383(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040005fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040005fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040005fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040005fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY383", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY383(a) cavm_cst_cwx_rom_romentry383_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY383(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY383(a) "CST_CWX_ROM_ROMENTRY383"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY383(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY383(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry384
 *
 * CST Cw Rom Romentry384 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry384
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry384_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry384_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry384 cavm_cst_cwx_rom_romentry384_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY384(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY384(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000600ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000600ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000600ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000600ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY384", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY384(a) cavm_cst_cwx_rom_romentry384_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY384(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY384(a) "CST_CWX_ROM_ROMENTRY384"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY384(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY384(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry385
 *
 * CST Cw Rom Romentry385 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry385
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry385_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry385_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry385 cavm_cst_cwx_rom_romentry385_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY385(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY385(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000604ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000604ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000604ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000604ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY385", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY385(a) cavm_cst_cwx_rom_romentry385_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY385(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY385(a) "CST_CWX_ROM_ROMENTRY385"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY385(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY385(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry386
 *
 * CST Cw Rom Romentry386 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry386
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry386_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry386_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry386 cavm_cst_cwx_rom_romentry386_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY386(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY386(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000608ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000608ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000608ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000608ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY386", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY386(a) cavm_cst_cwx_rom_romentry386_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY386(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY386(a) "CST_CWX_ROM_ROMENTRY386"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY386(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY386(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry387
 *
 * CST Cw Rom Romentry387 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry387
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry387_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry387_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry387 cavm_cst_cwx_rom_romentry387_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY387(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY387(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400060cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400060cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400060cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400060cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY387", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY387(a) cavm_cst_cwx_rom_romentry387_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY387(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY387(a) "CST_CWX_ROM_ROMENTRY387"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY387(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY387(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry388
 *
 * CST Cw Rom Romentry388 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry388
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry388_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry388_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry388 cavm_cst_cwx_rom_romentry388_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY388(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY388(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000610ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000610ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000610ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000610ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY388", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY388(a) cavm_cst_cwx_rom_romentry388_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY388(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY388(a) "CST_CWX_ROM_ROMENTRY388"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY388(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY388(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry389
 *
 * CST Cw Rom Romentry389 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry389
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry389_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry389_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry389 cavm_cst_cwx_rom_romentry389_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY389(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY389(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000614ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000614ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000614ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000614ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY389", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY389(a) cavm_cst_cwx_rom_romentry389_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY389(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY389(a) "CST_CWX_ROM_ROMENTRY389"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY389(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY389(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry39
 *
 * CST Cw Rom Romentry39 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry39
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry39_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry39_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry39 cavm_cst_cwx_rom_romentry39_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY39(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY39(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400009cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400009cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400009cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400009cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY39", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY39(a) cavm_cst_cwx_rom_romentry39_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY39(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY39(a) "CST_CWX_ROM_ROMENTRY39"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY39(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY39(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry390
 *
 * CST Cw Rom Romentry390 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry390
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry390_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry390_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry390 cavm_cst_cwx_rom_romentry390_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY390(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY390(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000618ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000618ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000618ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000618ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY390", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY390(a) cavm_cst_cwx_rom_romentry390_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY390(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY390(a) "CST_CWX_ROM_ROMENTRY390"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY390(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY390(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry391
 *
 * CST Cw Rom Romentry391 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry391
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry391_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry391_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry391 cavm_cst_cwx_rom_romentry391_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY391(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY391(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400061cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400061cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400061cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400061cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY391", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY391(a) cavm_cst_cwx_rom_romentry391_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY391(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY391(a) "CST_CWX_ROM_ROMENTRY391"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY391(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY391(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry392
 *
 * CST Cw Rom Romentry392 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry392
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry392_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry392_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry392 cavm_cst_cwx_rom_romentry392_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY392(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY392(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000620ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000620ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000620ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000620ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY392", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY392(a) cavm_cst_cwx_rom_romentry392_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY392(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY392(a) "CST_CWX_ROM_ROMENTRY392"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY392(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY392(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry393
 *
 * CST Cw Rom Romentry393 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry393
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry393_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry393_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry393 cavm_cst_cwx_rom_romentry393_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY393(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY393(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000624ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000624ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000624ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000624ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY393", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY393(a) cavm_cst_cwx_rom_romentry393_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY393(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY393(a) "CST_CWX_ROM_ROMENTRY393"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY393(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY393(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry394
 *
 * CST Cw Rom Romentry394 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry394
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry394_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry394_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry394 cavm_cst_cwx_rom_romentry394_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY394(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY394(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000628ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000628ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000628ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000628ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY394", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY394(a) cavm_cst_cwx_rom_romentry394_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY394(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY394(a) "CST_CWX_ROM_ROMENTRY394"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY394(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY394(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry395
 *
 * CST Cw Rom Romentry395 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry395
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry395_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry395_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry395 cavm_cst_cwx_rom_romentry395_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY395(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY395(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400062cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400062cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400062cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400062cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY395", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY395(a) cavm_cst_cwx_rom_romentry395_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY395(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY395(a) "CST_CWX_ROM_ROMENTRY395"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY395(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY395(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry396
 *
 * CST Cw Rom Romentry396 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry396
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry396_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry396_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry396 cavm_cst_cwx_rom_romentry396_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY396(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY396(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000630ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000630ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000630ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000630ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY396", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY396(a) cavm_cst_cwx_rom_romentry396_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY396(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY396(a) "CST_CWX_ROM_ROMENTRY396"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY396(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY396(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry397
 *
 * CST Cw Rom Romentry397 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry397
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry397_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry397_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry397 cavm_cst_cwx_rom_romentry397_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY397(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY397(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000634ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000634ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000634ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000634ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY397", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY397(a) cavm_cst_cwx_rom_romentry397_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY397(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY397(a) "CST_CWX_ROM_ROMENTRY397"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY397(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY397(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry398
 *
 * CST Cw Rom Romentry398 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry398
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry398_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry398_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry398 cavm_cst_cwx_rom_romentry398_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY398(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY398(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000638ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000638ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000638ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000638ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY398", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY398(a) cavm_cst_cwx_rom_romentry398_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY398(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY398(a) "CST_CWX_ROM_ROMENTRY398"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY398(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY398(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry399
 *
 * CST Cw Rom Romentry399 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry399
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry399_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry399_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry399 cavm_cst_cwx_rom_romentry399_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY399(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY399(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400063cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400063cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400063cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400063cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY399", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY399(a) cavm_cst_cwx_rom_romentry399_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY399(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY399(a) "CST_CWX_ROM_ROMENTRY399"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY399(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY399(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry4
 *
 * CST Cw Rom Romentry4 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry4
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry4_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry4_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry4 cavm_cst_cwx_rom_romentry4_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY4(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY4(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000010ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000010ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000010ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000010ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY4", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY4(a) cavm_cst_cwx_rom_romentry4_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY4(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY4(a) "CST_CWX_ROM_ROMENTRY4"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY4(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY4(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry40
 *
 * CST Cw Rom Romentry40 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry40
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry40_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry40_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry40 cavm_cst_cwx_rom_romentry40_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY40(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY40(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY40", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY40(a) cavm_cst_cwx_rom_romentry40_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY40(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY40(a) "CST_CWX_ROM_ROMENTRY40"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY40(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY40(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry400
 *
 * CST Cw Rom Romentry400 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry400
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry400_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry400_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry400 cavm_cst_cwx_rom_romentry400_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY400(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY400(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000640ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000640ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000640ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000640ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY400", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY400(a) cavm_cst_cwx_rom_romentry400_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY400(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY400(a) "CST_CWX_ROM_ROMENTRY400"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY400(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY400(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry401
 *
 * CST Cw Rom Romentry401 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry401
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry401_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry401_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry401 cavm_cst_cwx_rom_romentry401_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY401(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY401(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000644ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000644ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000644ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000644ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY401", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY401(a) cavm_cst_cwx_rom_romentry401_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY401(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY401(a) "CST_CWX_ROM_ROMENTRY401"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY401(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY401(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry402
 *
 * CST Cw Rom Romentry402 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry402
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry402_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry402_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry402 cavm_cst_cwx_rom_romentry402_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY402(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY402(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000648ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000648ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000648ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000648ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY402", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY402(a) cavm_cst_cwx_rom_romentry402_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY402(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY402(a) "CST_CWX_ROM_ROMENTRY402"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY402(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY402(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry403
 *
 * CST Cw Rom Romentry403 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry403
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry403_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry403_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry403 cavm_cst_cwx_rom_romentry403_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY403(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY403(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400064cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400064cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400064cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400064cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY403", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY403(a) cavm_cst_cwx_rom_romentry403_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY403(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY403(a) "CST_CWX_ROM_ROMENTRY403"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY403(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY403(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry404
 *
 * CST Cw Rom Romentry404 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry404
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry404_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry404_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry404 cavm_cst_cwx_rom_romentry404_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY404(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY404(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000650ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000650ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000650ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000650ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY404", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY404(a) cavm_cst_cwx_rom_romentry404_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY404(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY404(a) "CST_CWX_ROM_ROMENTRY404"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY404(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY404(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry405
 *
 * CST Cw Rom Romentry405 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry405
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry405_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry405_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry405 cavm_cst_cwx_rom_romentry405_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY405(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY405(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000654ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000654ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000654ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000654ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY405", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY405(a) cavm_cst_cwx_rom_romentry405_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY405(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY405(a) "CST_CWX_ROM_ROMENTRY405"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY405(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY405(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry406
 *
 * CST Cw Rom Romentry406 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry406
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry406_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry406_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry406 cavm_cst_cwx_rom_romentry406_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY406(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY406(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000658ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000658ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000658ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000658ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY406", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY406(a) cavm_cst_cwx_rom_romentry406_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY406(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY406(a) "CST_CWX_ROM_ROMENTRY406"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY406(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY406(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry407
 *
 * CST Cw Rom Romentry407 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry407
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry407_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry407_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry407 cavm_cst_cwx_rom_romentry407_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY407(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY407(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400065cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400065cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400065cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400065cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY407", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY407(a) cavm_cst_cwx_rom_romentry407_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY407(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY407(a) "CST_CWX_ROM_ROMENTRY407"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY407(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY407(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry408
 *
 * CST Cw Rom Romentry408 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry408
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry408_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry408_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry408 cavm_cst_cwx_rom_romentry408_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY408(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY408(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000660ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000660ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000660ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000660ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY408", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY408(a) cavm_cst_cwx_rom_romentry408_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY408(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY408(a) "CST_CWX_ROM_ROMENTRY408"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY408(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY408(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry409
 *
 * CST Cw Rom Romentry409 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry409
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry409_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry409_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry409 cavm_cst_cwx_rom_romentry409_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY409(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY409(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000664ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000664ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000664ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000664ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY409", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY409(a) cavm_cst_cwx_rom_romentry409_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY409(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY409(a) "CST_CWX_ROM_ROMENTRY409"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY409(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY409(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry41
 *
 * CST Cw Rom Romentry41 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry41
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry41_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry41_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry41 cavm_cst_cwx_rom_romentry41_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY41(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY41(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY41", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY41(a) cavm_cst_cwx_rom_romentry41_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY41(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY41(a) "CST_CWX_ROM_ROMENTRY41"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY41(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY41(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry410
 *
 * CST Cw Rom Romentry410 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry410
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry410_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry410_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry410 cavm_cst_cwx_rom_romentry410_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY410(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY410(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000668ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000668ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000668ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000668ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY410", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY410(a) cavm_cst_cwx_rom_romentry410_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY410(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY410(a) "CST_CWX_ROM_ROMENTRY410"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY410(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY410(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry411
 *
 * CST Cw Rom Romentry411 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry411
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry411_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry411_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry411 cavm_cst_cwx_rom_romentry411_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY411(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY411(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400066cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400066cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400066cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400066cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY411", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY411(a) cavm_cst_cwx_rom_romentry411_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY411(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY411(a) "CST_CWX_ROM_ROMENTRY411"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY411(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY411(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry412
 *
 * CST Cw Rom Romentry412 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry412
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry412_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry412_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry412 cavm_cst_cwx_rom_romentry412_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY412(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY412(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000670ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000670ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000670ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000670ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY412", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY412(a) cavm_cst_cwx_rom_romentry412_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY412(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY412(a) "CST_CWX_ROM_ROMENTRY412"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY412(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY412(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry413
 *
 * CST Cw Rom Romentry413 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry413
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry413_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry413_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry413 cavm_cst_cwx_rom_romentry413_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY413(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY413(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000674ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000674ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000674ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000674ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY413", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY413(a) cavm_cst_cwx_rom_romentry413_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY413(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY413(a) "CST_CWX_ROM_ROMENTRY413"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY413(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY413(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry414
 *
 * CST Cw Rom Romentry414 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry414
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry414_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry414_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry414 cavm_cst_cwx_rom_romentry414_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY414(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY414(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000678ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000678ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000678ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000678ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY414", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY414(a) cavm_cst_cwx_rom_romentry414_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY414(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY414(a) "CST_CWX_ROM_ROMENTRY414"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY414(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY414(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry415
 *
 * CST Cw Rom Romentry415 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry415
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry415_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry415_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry415 cavm_cst_cwx_rom_romentry415_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY415(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY415(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400067cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400067cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400067cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400067cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY415", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY415(a) cavm_cst_cwx_rom_romentry415_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY415(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY415(a) "CST_CWX_ROM_ROMENTRY415"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY415(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY415(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry416
 *
 * CST Cw Rom Romentry416 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry416
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry416_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry416_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry416 cavm_cst_cwx_rom_romentry416_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY416(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY416(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000680ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000680ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000680ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000680ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY416", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY416(a) cavm_cst_cwx_rom_romentry416_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY416(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY416(a) "CST_CWX_ROM_ROMENTRY416"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY416(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY416(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry417
 *
 * CST Cw Rom Romentry417 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry417
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry417_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry417_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry417 cavm_cst_cwx_rom_romentry417_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY417(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY417(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000684ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000684ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000684ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000684ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY417", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY417(a) cavm_cst_cwx_rom_romentry417_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY417(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY417(a) "CST_CWX_ROM_ROMENTRY417"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY417(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY417(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry418
 *
 * CST Cw Rom Romentry418 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry418
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry418_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry418_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry418 cavm_cst_cwx_rom_romentry418_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY418(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY418(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000688ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000688ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000688ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000688ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY418", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY418(a) cavm_cst_cwx_rom_romentry418_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY418(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY418(a) "CST_CWX_ROM_ROMENTRY418"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY418(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY418(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry419
 *
 * CST Cw Rom Romentry419 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry419
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry419_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry419_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry419 cavm_cst_cwx_rom_romentry419_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY419(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY419(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400068cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400068cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400068cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400068cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY419", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY419(a) cavm_cst_cwx_rom_romentry419_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY419(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY419(a) "CST_CWX_ROM_ROMENTRY419"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY419(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY419(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry42
 *
 * CST Cw Rom Romentry42 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry42
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry42_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry42_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry42 cavm_cst_cwx_rom_romentry42_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY42(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY42(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY42", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY42(a) cavm_cst_cwx_rom_romentry42_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY42(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY42(a) "CST_CWX_ROM_ROMENTRY42"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY42(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY42(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry420
 *
 * CST Cw Rom Romentry420 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry420
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry420_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry420_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry420 cavm_cst_cwx_rom_romentry420_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY420(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY420(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000690ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000690ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000690ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000690ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY420", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY420(a) cavm_cst_cwx_rom_romentry420_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY420(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY420(a) "CST_CWX_ROM_ROMENTRY420"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY420(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY420(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry421
 *
 * CST Cw Rom Romentry421 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry421
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry421_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry421_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry421 cavm_cst_cwx_rom_romentry421_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY421(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY421(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000694ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000694ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000694ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000694ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY421", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY421(a) cavm_cst_cwx_rom_romentry421_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY421(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY421(a) "CST_CWX_ROM_ROMENTRY421"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY421(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY421(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry422
 *
 * CST Cw Rom Romentry422 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry422
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry422_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry422_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry422 cavm_cst_cwx_rom_romentry422_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY422(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY422(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000698ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000698ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000698ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000698ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY422", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY422(a) cavm_cst_cwx_rom_romentry422_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY422(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY422(a) "CST_CWX_ROM_ROMENTRY422"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY422(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY422(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry423
 *
 * CST Cw Rom Romentry423 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry423
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry423_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry423_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry423 cavm_cst_cwx_rom_romentry423_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY423(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY423(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400069cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400069cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400069cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400069cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY423", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY423(a) cavm_cst_cwx_rom_romentry423_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY423(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY423(a) "CST_CWX_ROM_ROMENTRY423"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY423(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY423(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry424
 *
 * CST Cw Rom Romentry424 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry424
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry424_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry424_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry424 cavm_cst_cwx_rom_romentry424_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY424(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY424(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY424", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY424(a) cavm_cst_cwx_rom_romentry424_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY424(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY424(a) "CST_CWX_ROM_ROMENTRY424"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY424(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY424(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry425
 *
 * CST Cw Rom Romentry425 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry425
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry425_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry425_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry425 cavm_cst_cwx_rom_romentry425_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY425(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY425(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY425", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY425(a) cavm_cst_cwx_rom_romentry425_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY425(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY425(a) "CST_CWX_ROM_ROMENTRY425"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY425(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY425(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry426
 *
 * CST Cw Rom Romentry426 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry426
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry426_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry426_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry426 cavm_cst_cwx_rom_romentry426_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY426(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY426(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY426", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY426(a) cavm_cst_cwx_rom_romentry426_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY426(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY426(a) "CST_CWX_ROM_ROMENTRY426"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY426(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY426(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry427
 *
 * CST Cw Rom Romentry427 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry427
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry427_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry427_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry427 cavm_cst_cwx_rom_romentry427_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY427(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY427(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY427", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY427(a) cavm_cst_cwx_rom_romentry427_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY427(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY427(a) "CST_CWX_ROM_ROMENTRY427"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY427(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY427(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry428
 *
 * CST Cw Rom Romentry428 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry428
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry428_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry428_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry428 cavm_cst_cwx_rom_romentry428_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY428(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY428(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY428", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY428(a) cavm_cst_cwx_rom_romentry428_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY428(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY428(a) "CST_CWX_ROM_ROMENTRY428"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY428(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY428(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry429
 *
 * CST Cw Rom Romentry429 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry429
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry429_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry429_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry429 cavm_cst_cwx_rom_romentry429_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY429(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY429(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY429", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY429(a) cavm_cst_cwx_rom_romentry429_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY429(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY429(a) "CST_CWX_ROM_ROMENTRY429"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY429(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY429(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry43
 *
 * CST Cw Rom Romentry43 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry43
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry43_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry43_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry43 cavm_cst_cwx_rom_romentry43_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY43(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY43(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY43", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY43(a) cavm_cst_cwx_rom_romentry43_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY43(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY43(a) "CST_CWX_ROM_ROMENTRY43"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY43(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY43(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry430
 *
 * CST Cw Rom Romentry430 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry430
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry430_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry430_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry430 cavm_cst_cwx_rom_romentry430_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY430(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY430(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY430", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY430(a) cavm_cst_cwx_rom_romentry430_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY430(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY430(a) "CST_CWX_ROM_ROMENTRY430"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY430(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY430(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry431
 *
 * CST Cw Rom Romentry431 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry431
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry431_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry431_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry431 cavm_cst_cwx_rom_romentry431_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY431(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY431(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY431", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY431(a) cavm_cst_cwx_rom_romentry431_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY431(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY431(a) "CST_CWX_ROM_ROMENTRY431"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY431(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY431(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry432
 *
 * CST Cw Rom Romentry432 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry432
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry432_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry432_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry432 cavm_cst_cwx_rom_romentry432_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY432(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY432(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY432", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY432(a) cavm_cst_cwx_rom_romentry432_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY432(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY432(a) "CST_CWX_ROM_ROMENTRY432"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY432(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY432(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry433
 *
 * CST Cw Rom Romentry433 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry433
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry433_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry433_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry433 cavm_cst_cwx_rom_romentry433_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY433(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY433(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY433", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY433(a) cavm_cst_cwx_rom_romentry433_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY433(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY433(a) "CST_CWX_ROM_ROMENTRY433"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY433(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY433(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry434
 *
 * CST Cw Rom Romentry434 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry434
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry434_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry434_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry434 cavm_cst_cwx_rom_romentry434_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY434(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY434(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY434", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY434(a) cavm_cst_cwx_rom_romentry434_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY434(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY434(a) "CST_CWX_ROM_ROMENTRY434"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY434(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY434(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry435
 *
 * CST Cw Rom Romentry435 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry435
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry435_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry435_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry435 cavm_cst_cwx_rom_romentry435_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY435(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY435(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY435", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY435(a) cavm_cst_cwx_rom_romentry435_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY435(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY435(a) "CST_CWX_ROM_ROMENTRY435"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY435(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY435(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry436
 *
 * CST Cw Rom Romentry436 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry436
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry436_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry436_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry436 cavm_cst_cwx_rom_romentry436_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY436(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY436(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY436", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY436(a) cavm_cst_cwx_rom_romentry436_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY436(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY436(a) "CST_CWX_ROM_ROMENTRY436"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY436(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY436(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry437
 *
 * CST Cw Rom Romentry437 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry437
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry437_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry437_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry437 cavm_cst_cwx_rom_romentry437_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY437(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY437(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY437", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY437(a) cavm_cst_cwx_rom_romentry437_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY437(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY437(a) "CST_CWX_ROM_ROMENTRY437"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY437(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY437(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry438
 *
 * CST Cw Rom Romentry438 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry438
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry438_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry438_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry438 cavm_cst_cwx_rom_romentry438_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY438(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY438(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY438", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY438(a) cavm_cst_cwx_rom_romentry438_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY438(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY438(a) "CST_CWX_ROM_ROMENTRY438"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY438(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY438(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry439
 *
 * CST Cw Rom Romentry439 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry439
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry439_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry439_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry439 cavm_cst_cwx_rom_romentry439_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY439(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY439(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY439", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY439(a) cavm_cst_cwx_rom_romentry439_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY439(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY439(a) "CST_CWX_ROM_ROMENTRY439"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY439(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY439(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry44
 *
 * CST Cw Rom Romentry44 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry44
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry44_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry44_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry44 cavm_cst_cwx_rom_romentry44_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY44(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY44(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY44", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY44(a) cavm_cst_cwx_rom_romentry44_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY44(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY44(a) "CST_CWX_ROM_ROMENTRY44"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY44(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY44(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry440
 *
 * CST Cw Rom Romentry440 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry440
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry440_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry440_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry440 cavm_cst_cwx_rom_romentry440_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY440(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY440(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY440", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY440(a) cavm_cst_cwx_rom_romentry440_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY440(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY440(a) "CST_CWX_ROM_ROMENTRY440"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY440(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY440(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry441
 *
 * CST Cw Rom Romentry441 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry441
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry441_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry441_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry441 cavm_cst_cwx_rom_romentry441_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY441(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY441(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY441", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY441(a) cavm_cst_cwx_rom_romentry441_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY441(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY441(a) "CST_CWX_ROM_ROMENTRY441"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY441(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY441(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry442
 *
 * CST Cw Rom Romentry442 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry442
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry442_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry442_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry442 cavm_cst_cwx_rom_romentry442_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY442(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY442(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY442", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY442(a) cavm_cst_cwx_rom_romentry442_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY442(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY442(a) "CST_CWX_ROM_ROMENTRY442"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY442(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY442(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry443
 *
 * CST Cw Rom Romentry443 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry443
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry443_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry443_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry443 cavm_cst_cwx_rom_romentry443_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY443(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY443(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY443", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY443(a) cavm_cst_cwx_rom_romentry443_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY443(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY443(a) "CST_CWX_ROM_ROMENTRY443"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY443(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY443(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry444
 *
 * CST Cw Rom Romentry444 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry444
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry444_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry444_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry444 cavm_cst_cwx_rom_romentry444_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY444(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY444(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY444", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY444(a) cavm_cst_cwx_rom_romentry444_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY444(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY444(a) "CST_CWX_ROM_ROMENTRY444"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY444(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY444(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry445
 *
 * CST Cw Rom Romentry445 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry445
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry445_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry445_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry445 cavm_cst_cwx_rom_romentry445_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY445(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY445(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY445", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY445(a) cavm_cst_cwx_rom_romentry445_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY445(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY445(a) "CST_CWX_ROM_ROMENTRY445"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY445(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY445(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry446
 *
 * CST Cw Rom Romentry446 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry446
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry446_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry446_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry446 cavm_cst_cwx_rom_romentry446_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY446(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY446(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY446", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY446(a) cavm_cst_cwx_rom_romentry446_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY446(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY446(a) "CST_CWX_ROM_ROMENTRY446"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY446(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY446(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry447
 *
 * CST Cw Rom Romentry447 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry447
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry447_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry447_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry447 cavm_cst_cwx_rom_romentry447_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY447(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY447(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040006fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040006fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040006fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040006fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY447", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY447(a) cavm_cst_cwx_rom_romentry447_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY447(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY447(a) "CST_CWX_ROM_ROMENTRY447"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY447(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY447(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry448
 *
 * CST Cw Rom Romentry448 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry448
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry448_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry448_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry448 cavm_cst_cwx_rom_romentry448_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY448(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY448(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000700ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000700ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000700ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000700ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY448", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY448(a) cavm_cst_cwx_rom_romentry448_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY448(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY448(a) "CST_CWX_ROM_ROMENTRY448"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY448(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY448(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry449
 *
 * CST Cw Rom Romentry449 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry449
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry449_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry449_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry449 cavm_cst_cwx_rom_romentry449_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY449(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY449(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000704ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000704ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000704ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000704ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY449", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY449(a) cavm_cst_cwx_rom_romentry449_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY449(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY449(a) "CST_CWX_ROM_ROMENTRY449"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY449(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY449(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry45
 *
 * CST Cw Rom Romentry45 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry45
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry45_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry45_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry45 cavm_cst_cwx_rom_romentry45_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY45(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY45(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY45", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY45(a) cavm_cst_cwx_rom_romentry45_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY45(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY45(a) "CST_CWX_ROM_ROMENTRY45"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY45(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY45(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry450
 *
 * CST Cw Rom Romentry450 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry450
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry450_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry450_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry450 cavm_cst_cwx_rom_romentry450_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY450(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY450(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000708ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000708ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000708ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000708ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY450", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY450(a) cavm_cst_cwx_rom_romentry450_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY450(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY450(a) "CST_CWX_ROM_ROMENTRY450"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY450(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY450(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry451
 *
 * CST Cw Rom Romentry451 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry451
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry451_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry451_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry451 cavm_cst_cwx_rom_romentry451_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY451(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY451(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400070cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400070cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400070cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400070cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY451", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY451(a) cavm_cst_cwx_rom_romentry451_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY451(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY451(a) "CST_CWX_ROM_ROMENTRY451"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY451(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY451(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry452
 *
 * CST Cw Rom Romentry452 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry452
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry452_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry452_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry452 cavm_cst_cwx_rom_romentry452_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY452(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY452(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000710ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000710ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000710ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000710ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY452", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY452(a) cavm_cst_cwx_rom_romentry452_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY452(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY452(a) "CST_CWX_ROM_ROMENTRY452"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY452(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY452(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry453
 *
 * CST Cw Rom Romentry453 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry453
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry453_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry453_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry453 cavm_cst_cwx_rom_romentry453_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY453(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY453(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000714ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000714ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000714ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000714ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY453", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY453(a) cavm_cst_cwx_rom_romentry453_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY453(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY453(a) "CST_CWX_ROM_ROMENTRY453"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY453(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY453(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry454
 *
 * CST Cw Rom Romentry454 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry454
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry454_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry454_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry454 cavm_cst_cwx_rom_romentry454_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY454(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY454(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000718ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000718ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000718ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000718ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY454", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY454(a) cavm_cst_cwx_rom_romentry454_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY454(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY454(a) "CST_CWX_ROM_ROMENTRY454"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY454(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY454(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry455
 *
 * CST Cw Rom Romentry455 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry455
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry455_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry455_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry455 cavm_cst_cwx_rom_romentry455_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY455(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY455(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400071cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400071cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400071cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400071cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY455", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY455(a) cavm_cst_cwx_rom_romentry455_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY455(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY455(a) "CST_CWX_ROM_ROMENTRY455"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY455(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY455(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry456
 *
 * CST Cw Rom Romentry456 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry456
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry456_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry456_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry456 cavm_cst_cwx_rom_romentry456_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY456(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY456(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000720ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000720ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000720ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000720ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY456", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY456(a) cavm_cst_cwx_rom_romentry456_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY456(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY456(a) "CST_CWX_ROM_ROMENTRY456"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY456(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY456(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry457
 *
 * CST Cw Rom Romentry457 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry457
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry457_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry457_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry457 cavm_cst_cwx_rom_romentry457_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY457(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY457(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000724ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000724ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000724ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000724ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY457", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY457(a) cavm_cst_cwx_rom_romentry457_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY457(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY457(a) "CST_CWX_ROM_ROMENTRY457"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY457(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY457(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry458
 *
 * CST Cw Rom Romentry458 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry458
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry458_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry458_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry458 cavm_cst_cwx_rom_romentry458_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY458(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY458(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000728ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000728ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000728ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000728ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY458", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY458(a) cavm_cst_cwx_rom_romentry458_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY458(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY458(a) "CST_CWX_ROM_ROMENTRY458"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY458(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY458(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry459
 *
 * CST Cw Rom Romentry459 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry459
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry459_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry459_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry459 cavm_cst_cwx_rom_romentry459_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY459(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY459(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400072cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400072cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400072cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400072cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY459", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY459(a) cavm_cst_cwx_rom_romentry459_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY459(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY459(a) "CST_CWX_ROM_ROMENTRY459"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY459(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY459(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry46
 *
 * CST Cw Rom Romentry46 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry46
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry46_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry46_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry46 cavm_cst_cwx_rom_romentry46_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY46(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY46(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY46", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY46(a) cavm_cst_cwx_rom_romentry46_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY46(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY46(a) "CST_CWX_ROM_ROMENTRY46"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY46(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY46(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry460
 *
 * CST Cw Rom Romentry460 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry460
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry460_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry460_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry460 cavm_cst_cwx_rom_romentry460_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY460(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY460(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000730ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000730ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000730ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000730ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY460", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY460(a) cavm_cst_cwx_rom_romentry460_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY460(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY460(a) "CST_CWX_ROM_ROMENTRY460"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY460(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY460(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry461
 *
 * CST Cw Rom Romentry461 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry461
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry461_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry461_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry461 cavm_cst_cwx_rom_romentry461_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY461(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY461(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000734ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000734ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000734ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000734ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY461", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY461(a) cavm_cst_cwx_rom_romentry461_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY461(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY461(a) "CST_CWX_ROM_ROMENTRY461"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY461(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY461(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry462
 *
 * CST Cw Rom Romentry462 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry462
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry462_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry462_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry462 cavm_cst_cwx_rom_romentry462_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY462(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY462(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000738ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000738ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000738ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000738ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY462", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY462(a) cavm_cst_cwx_rom_romentry462_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY462(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY462(a) "CST_CWX_ROM_ROMENTRY462"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY462(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY462(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry463
 *
 * CST Cw Rom Romentry463 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry463
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry463_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry463_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry463 cavm_cst_cwx_rom_romentry463_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY463(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY463(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400073cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400073cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400073cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400073cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY463", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY463(a) cavm_cst_cwx_rom_romentry463_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY463(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY463(a) "CST_CWX_ROM_ROMENTRY463"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY463(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY463(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry464
 *
 * CST Cw Rom Romentry464 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry464
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry464_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry464_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry464 cavm_cst_cwx_rom_romentry464_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY464(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY464(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000740ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000740ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000740ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000740ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY464", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY464(a) cavm_cst_cwx_rom_romentry464_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY464(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY464(a) "CST_CWX_ROM_ROMENTRY464"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY464(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY464(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry465
 *
 * CST Cw Rom Romentry465 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry465
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry465_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry465_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry465 cavm_cst_cwx_rom_romentry465_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY465(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY465(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000744ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000744ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000744ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000744ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY465", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY465(a) cavm_cst_cwx_rom_romentry465_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY465(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY465(a) "CST_CWX_ROM_ROMENTRY465"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY465(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY465(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry466
 *
 * CST Cw Rom Romentry466 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry466
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry466_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry466_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry466 cavm_cst_cwx_rom_romentry466_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY466(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY466(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000748ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000748ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000748ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000748ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY466", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY466(a) cavm_cst_cwx_rom_romentry466_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY466(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY466(a) "CST_CWX_ROM_ROMENTRY466"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY466(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY466(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry467
 *
 * CST Cw Rom Romentry467 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry467
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry467_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry467_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry467 cavm_cst_cwx_rom_romentry467_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY467(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY467(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400074cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400074cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400074cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400074cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY467", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY467(a) cavm_cst_cwx_rom_romentry467_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY467(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY467(a) "CST_CWX_ROM_ROMENTRY467"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY467(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY467(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry468
 *
 * CST Cw Rom Romentry468 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry468
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry468_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry468_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry468 cavm_cst_cwx_rom_romentry468_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY468(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY468(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000750ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000750ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000750ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000750ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY468", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY468(a) cavm_cst_cwx_rom_romentry468_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY468(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY468(a) "CST_CWX_ROM_ROMENTRY468"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY468(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY468(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry469
 *
 * CST Cw Rom Romentry469 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry469
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry469_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry469_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry469 cavm_cst_cwx_rom_romentry469_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY469(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY469(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000754ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000754ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000754ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000754ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY469", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY469(a) cavm_cst_cwx_rom_romentry469_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY469(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY469(a) "CST_CWX_ROM_ROMENTRY469"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY469(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY469(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry47
 *
 * CST Cw Rom Romentry47 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry47
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry47_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry47_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry47 cavm_cst_cwx_rom_romentry47_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY47(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY47(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY47", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY47(a) cavm_cst_cwx_rom_romentry47_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY47(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY47(a) "CST_CWX_ROM_ROMENTRY47"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY47(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY47(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry470
 *
 * CST Cw Rom Romentry470 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry470
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry470_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry470_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry470 cavm_cst_cwx_rom_romentry470_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY470(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY470(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000758ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000758ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000758ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000758ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY470", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY470(a) cavm_cst_cwx_rom_romentry470_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY470(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY470(a) "CST_CWX_ROM_ROMENTRY470"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY470(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY470(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry471
 *
 * CST Cw Rom Romentry471 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry471
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry471_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry471_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry471 cavm_cst_cwx_rom_romentry471_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY471(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY471(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400075cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400075cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400075cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400075cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY471", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY471(a) cavm_cst_cwx_rom_romentry471_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY471(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY471(a) "CST_CWX_ROM_ROMENTRY471"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY471(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY471(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry472
 *
 * CST Cw Rom Romentry472 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry472
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry472_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry472_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry472 cavm_cst_cwx_rom_romentry472_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY472(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY472(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000760ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000760ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000760ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000760ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY472", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY472(a) cavm_cst_cwx_rom_romentry472_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY472(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY472(a) "CST_CWX_ROM_ROMENTRY472"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY472(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY472(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry473
 *
 * CST Cw Rom Romentry473 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry473
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry473_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry473_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry473 cavm_cst_cwx_rom_romentry473_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY473(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY473(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000764ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000764ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000764ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000764ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY473", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY473(a) cavm_cst_cwx_rom_romentry473_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY473(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY473(a) "CST_CWX_ROM_ROMENTRY473"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY473(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY473(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry474
 *
 * CST Cw Rom Romentry474 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry474
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry474_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry474_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry474 cavm_cst_cwx_rom_romentry474_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY474(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY474(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000768ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000768ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000768ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000768ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY474", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY474(a) cavm_cst_cwx_rom_romentry474_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY474(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY474(a) "CST_CWX_ROM_ROMENTRY474"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY474(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY474(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry475
 *
 * CST Cw Rom Romentry475 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry475
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry475_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry475_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry475 cavm_cst_cwx_rom_romentry475_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY475(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY475(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400076cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400076cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400076cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400076cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY475", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY475(a) cavm_cst_cwx_rom_romentry475_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY475(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY475(a) "CST_CWX_ROM_ROMENTRY475"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY475(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY475(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry476
 *
 * CST Cw Rom Romentry476 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry476
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry476_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry476_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry476 cavm_cst_cwx_rom_romentry476_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY476(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY476(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000770ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000770ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000770ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000770ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY476", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY476(a) cavm_cst_cwx_rom_romentry476_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY476(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY476(a) "CST_CWX_ROM_ROMENTRY476"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY476(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY476(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry477
 *
 * CST Cw Rom Romentry477 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry477
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry477_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry477_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry477 cavm_cst_cwx_rom_romentry477_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY477(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY477(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000774ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000774ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000774ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000774ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY477", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY477(a) cavm_cst_cwx_rom_romentry477_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY477(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY477(a) "CST_CWX_ROM_ROMENTRY477"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY477(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY477(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry478
 *
 * CST Cw Rom Romentry478 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry478
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry478_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry478_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry478 cavm_cst_cwx_rom_romentry478_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY478(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY478(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000778ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000778ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000778ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000778ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY478", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY478(a) cavm_cst_cwx_rom_romentry478_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY478(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY478(a) "CST_CWX_ROM_ROMENTRY478"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY478(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY478(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry479
 *
 * CST Cw Rom Romentry479 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry479
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry479_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry479_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry479 cavm_cst_cwx_rom_romentry479_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY479(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY479(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400077cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400077cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400077cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400077cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY479", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY479(a) cavm_cst_cwx_rom_romentry479_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY479(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY479(a) "CST_CWX_ROM_ROMENTRY479"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY479(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY479(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry48
 *
 * CST Cw Rom Romentry48 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry48
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry48_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry48_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry48 cavm_cst_cwx_rom_romentry48_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY48(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY48(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY48", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY48(a) cavm_cst_cwx_rom_romentry48_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY48(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY48(a) "CST_CWX_ROM_ROMENTRY48"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY48(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY48(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry480
 *
 * CST Cw Rom Romentry480 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry480
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry480_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry480_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry480 cavm_cst_cwx_rom_romentry480_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY480(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY480(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000780ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000780ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000780ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000780ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY480", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY480(a) cavm_cst_cwx_rom_romentry480_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY480(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY480(a) "CST_CWX_ROM_ROMENTRY480"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY480(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY480(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry481
 *
 * CST Cw Rom Romentry481 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry481
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry481_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry481_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry481 cavm_cst_cwx_rom_romentry481_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY481(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY481(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000784ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000784ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000784ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000784ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY481", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY481(a) cavm_cst_cwx_rom_romentry481_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY481(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY481(a) "CST_CWX_ROM_ROMENTRY481"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY481(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY481(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry482
 *
 * CST Cw Rom Romentry482 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry482
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry482_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry482_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry482 cavm_cst_cwx_rom_romentry482_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY482(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY482(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000788ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000788ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000788ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000788ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY482", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY482(a) cavm_cst_cwx_rom_romentry482_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY482(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY482(a) "CST_CWX_ROM_ROMENTRY482"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY482(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY482(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry483
 *
 * CST Cw Rom Romentry483 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry483
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry483_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry483_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry483 cavm_cst_cwx_rom_romentry483_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY483(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY483(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400078cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400078cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400078cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400078cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY483", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY483(a) cavm_cst_cwx_rom_romentry483_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY483(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY483(a) "CST_CWX_ROM_ROMENTRY483"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY483(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY483(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry484
 *
 * CST Cw Rom Romentry484 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry484
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry484_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry484_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry484 cavm_cst_cwx_rom_romentry484_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY484(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY484(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000790ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000790ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000790ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000790ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY484", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY484(a) cavm_cst_cwx_rom_romentry484_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY484(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY484(a) "CST_CWX_ROM_ROMENTRY484"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY484(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY484(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry485
 *
 * CST Cw Rom Romentry485 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry485
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry485_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry485_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry485 cavm_cst_cwx_rom_romentry485_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY485(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY485(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000794ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000794ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000794ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000794ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY485", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY485(a) cavm_cst_cwx_rom_romentry485_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY485(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY485(a) "CST_CWX_ROM_ROMENTRY485"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY485(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY485(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry486
 *
 * CST Cw Rom Romentry486 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry486
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry486_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry486_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry486 cavm_cst_cwx_rom_romentry486_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY486(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY486(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000798ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000798ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000798ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000798ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY486", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY486(a) cavm_cst_cwx_rom_romentry486_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY486(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY486(a) "CST_CWX_ROM_ROMENTRY486"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY486(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY486(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry487
 *
 * CST Cw Rom Romentry487 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry487
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry487_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry487_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry487 cavm_cst_cwx_rom_romentry487_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY487(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY487(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400079cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400079cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400079cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400079cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY487", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY487(a) cavm_cst_cwx_rom_romentry487_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY487(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY487(a) "CST_CWX_ROM_ROMENTRY487"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY487(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY487(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry488
 *
 * CST Cw Rom Romentry488 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry488
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry488_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry488_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry488 cavm_cst_cwx_rom_romentry488_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY488(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY488(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007a0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007a0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007a0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY488", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY488(a) cavm_cst_cwx_rom_romentry488_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY488(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY488(a) "CST_CWX_ROM_ROMENTRY488"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY488(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY488(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry489
 *
 * CST Cw Rom Romentry489 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry489
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry489_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry489_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry489 cavm_cst_cwx_rom_romentry489_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY489(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY489(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007a4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007a4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007a4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY489", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY489(a) cavm_cst_cwx_rom_romentry489_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY489(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY489(a) "CST_CWX_ROM_ROMENTRY489"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY489(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY489(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry49
 *
 * CST Cw Rom Romentry49 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry49
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry49_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry49_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry49 cavm_cst_cwx_rom_romentry49_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY49(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY49(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY49", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY49(a) cavm_cst_cwx_rom_romentry49_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY49(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY49(a) "CST_CWX_ROM_ROMENTRY49"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY49(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY49(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry490
 *
 * CST Cw Rom Romentry490 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry490
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry490_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry490_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry490 cavm_cst_cwx_rom_romentry490_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY490(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY490(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007a8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007a8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007a8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY490", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY490(a) cavm_cst_cwx_rom_romentry490_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY490(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY490(a) "CST_CWX_ROM_ROMENTRY490"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY490(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY490(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry491
 *
 * CST Cw Rom Romentry491 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry491
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry491_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry491_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry491 cavm_cst_cwx_rom_romentry491_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY491(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY491(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007acll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007acll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007acll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY491", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY491(a) cavm_cst_cwx_rom_romentry491_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY491(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY491(a) "CST_CWX_ROM_ROMENTRY491"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY491(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY491(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry492
 *
 * CST Cw Rom Romentry492 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry492
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry492_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry492_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry492 cavm_cst_cwx_rom_romentry492_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY492(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY492(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007b0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007b0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007b0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY492", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY492(a) cavm_cst_cwx_rom_romentry492_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY492(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY492(a) "CST_CWX_ROM_ROMENTRY492"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY492(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY492(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry493
 *
 * CST Cw Rom Romentry493 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry493
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry493_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry493_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry493 cavm_cst_cwx_rom_romentry493_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY493(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY493(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007b4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007b4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007b4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY493", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY493(a) cavm_cst_cwx_rom_romentry493_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY493(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY493(a) "CST_CWX_ROM_ROMENTRY493"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY493(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY493(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry494
 *
 * CST Cw Rom Romentry494 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry494
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry494_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry494_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry494 cavm_cst_cwx_rom_romentry494_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY494(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY494(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007b8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007b8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007b8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY494", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY494(a) cavm_cst_cwx_rom_romentry494_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY494(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY494(a) "CST_CWX_ROM_ROMENTRY494"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY494(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY494(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry495
 *
 * CST Cw Rom Romentry495 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry495
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry495_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry495_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry495 cavm_cst_cwx_rom_romentry495_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY495(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY495(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007bcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007bcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007bcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY495", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY495(a) cavm_cst_cwx_rom_romentry495_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY495(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY495(a) "CST_CWX_ROM_ROMENTRY495"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY495(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY495(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry496
 *
 * CST Cw Rom Romentry496 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry496
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry496_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry496_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry496 cavm_cst_cwx_rom_romentry496_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY496(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY496(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007c0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007c0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007c0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY496", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY496(a) cavm_cst_cwx_rom_romentry496_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY496(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY496(a) "CST_CWX_ROM_ROMENTRY496"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY496(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY496(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry497
 *
 * CST Cw Rom Romentry497 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry497
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry497_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry497_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry497 cavm_cst_cwx_rom_romentry497_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY497(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY497(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007c4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007c4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007c4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY497", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY497(a) cavm_cst_cwx_rom_romentry497_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY497(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY497(a) "CST_CWX_ROM_ROMENTRY497"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY497(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY497(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry498
 *
 * CST Cw Rom Romentry498 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry498
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry498_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry498_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry498 cavm_cst_cwx_rom_romentry498_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY498(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY498(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY498", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY498(a) cavm_cst_cwx_rom_romentry498_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY498(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY498(a) "CST_CWX_ROM_ROMENTRY498"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY498(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY498(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry499
 *
 * CST Cw Rom Romentry499 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry499
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry499_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry499_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry499 cavm_cst_cwx_rom_romentry499_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY499(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY499(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY499", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY499(a) cavm_cst_cwx_rom_romentry499_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY499(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY499(a) "CST_CWX_ROM_ROMENTRY499"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY499(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY499(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry5
 *
 * CST Cw Rom Romentry5 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry5
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry5_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry5_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry5 cavm_cst_cwx_rom_romentry5_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY5(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY5(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000014ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000014ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000014ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000014ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY5", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY5(a) cavm_cst_cwx_rom_romentry5_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY5(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY5(a) "CST_CWX_ROM_ROMENTRY5"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY5(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY5(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry50
 *
 * CST Cw Rom Romentry50 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry50
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry50_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry50_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry50 cavm_cst_cwx_rom_romentry50_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY50(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY50(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000c8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000c8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000c8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY50", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY50(a) cavm_cst_cwx_rom_romentry50_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY50(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY50(a) "CST_CWX_ROM_ROMENTRY50"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY50(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY50(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry500
 *
 * CST Cw Rom Romentry500 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry500
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry500_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry500_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry500 cavm_cst_cwx_rom_romentry500_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY500(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY500(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY500", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY500(a) cavm_cst_cwx_rom_romentry500_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY500(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY500(a) "CST_CWX_ROM_ROMENTRY500"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY500(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY500(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry501
 *
 * CST Cw Rom Romentry501 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry501
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry501_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry501_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry501 cavm_cst_cwx_rom_romentry501_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY501(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY501(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY501", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY501(a) cavm_cst_cwx_rom_romentry501_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY501(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY501(a) "CST_CWX_ROM_ROMENTRY501"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY501(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY501(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry502
 *
 * CST Cw Rom Romentry502 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry502
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry502_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry502_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry502 cavm_cst_cwx_rom_romentry502_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY502(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY502(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY502", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY502(a) cavm_cst_cwx_rom_romentry502_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY502(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY502(a) "CST_CWX_ROM_ROMENTRY502"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY502(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY502(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry503
 *
 * CST Cw Rom Romentry503 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry503
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry503_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry503_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry503 cavm_cst_cwx_rom_romentry503_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY503(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY503(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY503", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY503(a) cavm_cst_cwx_rom_romentry503_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY503(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY503(a) "CST_CWX_ROM_ROMENTRY503"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY503(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY503(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry504
 *
 * CST Cw Rom Romentry504 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry504
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry504_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry504_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry504 cavm_cst_cwx_rom_romentry504_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY504(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY504(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY504", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY504(a) cavm_cst_cwx_rom_romentry504_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY504(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY504(a) "CST_CWX_ROM_ROMENTRY504"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY504(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY504(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry505
 *
 * CST Cw Rom Romentry505 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry505
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry505_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry505_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry505 cavm_cst_cwx_rom_romentry505_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY505(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY505(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY505", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY505(a) cavm_cst_cwx_rom_romentry505_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY505(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY505(a) "CST_CWX_ROM_ROMENTRY505"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY505(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY505(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry506
 *
 * CST Cw Rom Romentry506 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry506
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry506_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry506_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry506 cavm_cst_cwx_rom_romentry506_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY506(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY506(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY506", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY506(a) cavm_cst_cwx_rom_romentry506_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY506(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY506(a) "CST_CWX_ROM_ROMENTRY506"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY506(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY506(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry507
 *
 * CST Cw Rom Romentry507 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry507
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry507_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry507_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry507 cavm_cst_cwx_rom_romentry507_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY507(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY507(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY507", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY507(a) cavm_cst_cwx_rom_romentry507_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY507(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY507(a) "CST_CWX_ROM_ROMENTRY507"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY507(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY507(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry508
 *
 * CST Cw Rom Romentry508 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry508
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry508_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry508_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry508 cavm_cst_cwx_rom_romentry508_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY508(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY508(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY508", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY508(a) cavm_cst_cwx_rom_romentry508_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY508(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY508(a) "CST_CWX_ROM_ROMENTRY508"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY508(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY508(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry509
 *
 * CST Cw Rom Romentry509 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry509
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry509_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry509_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry509 cavm_cst_cwx_rom_romentry509_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY509(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY509(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY509", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY509(a) cavm_cst_cwx_rom_romentry509_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY509(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY509(a) "CST_CWX_ROM_ROMENTRY509"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY509(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY509(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry51
 *
 * CST Cw Rom Romentry51 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry51
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry51_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry51_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry51 cavm_cst_cwx_rom_romentry51_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY51(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY51(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000ccll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000ccll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000ccll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY51", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY51(a) cavm_cst_cwx_rom_romentry51_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY51(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY51(a) "CST_CWX_ROM_ROMENTRY51"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY51(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY51(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry510
 *
 * CST Cw Rom Romentry510 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry510
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry510_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry510_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry510 cavm_cst_cwx_rom_romentry510_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY510(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY510(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY510", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY510(a) cavm_cst_cwx_rom_romentry510_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY510(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY510(a) "CST_CWX_ROM_ROMENTRY510"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY510(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY510(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry511
 *
 * CST Cw Rom Romentry511 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry511
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry511_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry511_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry511 cavm_cst_cwx_rom_romentry511_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY511(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY511(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040007fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040007fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040007fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040007fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY511", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY511(a) cavm_cst_cwx_rom_romentry511_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY511(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY511(a) "CST_CWX_ROM_ROMENTRY511"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY511(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY511(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry52
 *
 * CST Cw Rom Romentry52 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry52
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry52_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry52_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry52 cavm_cst_cwx_rom_romentry52_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY52(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY52(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000d0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000d0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000d0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY52", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY52(a) cavm_cst_cwx_rom_romentry52_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY52(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY52(a) "CST_CWX_ROM_ROMENTRY52"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY52(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY52(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry53
 *
 * CST Cw Rom Romentry53 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry53
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry53_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry53_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry53 cavm_cst_cwx_rom_romentry53_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY53(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY53(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000d4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000d4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000d4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY53", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY53(a) cavm_cst_cwx_rom_romentry53_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY53(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY53(a) "CST_CWX_ROM_ROMENTRY53"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY53(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY53(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry54
 *
 * CST Cw Rom Romentry54 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry54
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry54_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry54_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry54 cavm_cst_cwx_rom_romentry54_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY54(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY54(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000d8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000d8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000d8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY54", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY54(a) cavm_cst_cwx_rom_romentry54_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY54(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY54(a) "CST_CWX_ROM_ROMENTRY54"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY54(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY54(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry55
 *
 * CST Cw Rom Romentry55 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry55
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry55_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry55_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry55 cavm_cst_cwx_rom_romentry55_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY55(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY55(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000dcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000dcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000dcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY55", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY55(a) cavm_cst_cwx_rom_romentry55_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY55(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY55(a) "CST_CWX_ROM_ROMENTRY55"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY55(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY55(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry56
 *
 * CST Cw Rom Romentry56 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry56
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry56_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry56_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry56 cavm_cst_cwx_rom_romentry56_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY56(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY56(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000e0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000e0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000e0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY56", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY56(a) cavm_cst_cwx_rom_romentry56_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY56(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY56(a) "CST_CWX_ROM_ROMENTRY56"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY56(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY56(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry57
 *
 * CST Cw Rom Romentry57 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry57
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry57_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry57_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry57 cavm_cst_cwx_rom_romentry57_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY57(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY57(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000e4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000e4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000e4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY57", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY57(a) cavm_cst_cwx_rom_romentry57_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY57(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY57(a) "CST_CWX_ROM_ROMENTRY57"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY57(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY57(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry58
 *
 * CST Cw Rom Romentry58 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry58
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry58_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry58_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry58 cavm_cst_cwx_rom_romentry58_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY58(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY58(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000e8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000e8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000e8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY58", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY58(a) cavm_cst_cwx_rom_romentry58_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY58(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY58(a) "CST_CWX_ROM_ROMENTRY58"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY58(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY58(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry59
 *
 * CST Cw Rom Romentry59 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry59
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry59_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry59_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry59 cavm_cst_cwx_rom_romentry59_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY59(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY59(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000ecll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000ecll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000ecll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY59", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY59(a) cavm_cst_cwx_rom_romentry59_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY59(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY59(a) "CST_CWX_ROM_ROMENTRY59"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY59(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY59(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry6
 *
 * CST Cw Rom Romentry6 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry6
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry6_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry6_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry6 cavm_cst_cwx_rom_romentry6_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY6(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY6(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000018ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000018ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000018ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000018ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY6", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY6(a) cavm_cst_cwx_rom_romentry6_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY6(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY6(a) "CST_CWX_ROM_ROMENTRY6"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY6(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY6(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry60
 *
 * CST Cw Rom Romentry60 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry60
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry60_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry60_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry60 cavm_cst_cwx_rom_romentry60_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY60(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY60(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000f0ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000f0ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000f0ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY60", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY60(a) cavm_cst_cwx_rom_romentry60_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY60(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY60(a) "CST_CWX_ROM_ROMENTRY60"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY60(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY60(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry61
 *
 * CST Cw Rom Romentry61 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry61
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry61_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry61_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry61 cavm_cst_cwx_rom_romentry61_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY61(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY61(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000f4ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000f4ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000f4ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY61", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY61(a) cavm_cst_cwx_rom_romentry61_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY61(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY61(a) "CST_CWX_ROM_ROMENTRY61"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY61(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY61(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry62
 *
 * CST Cw Rom Romentry62 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry62
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry62_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry62_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry62 cavm_cst_cwx_rom_romentry62_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY62(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY62(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000f8ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000f8ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000f8ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY62", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY62(a) cavm_cst_cwx_rom_romentry62_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY62(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY62(a) "CST_CWX_ROM_ROMENTRY62"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY62(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY62(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry63
 *
 * CST Cw Rom Romentry63 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry63
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry63_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry63_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry63 cavm_cst_cwx_rom_romentry63_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY63(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY63(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a0040000fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a0040000fcll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a0040000fcll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a0040000fcll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY63", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY63(a) cavm_cst_cwx_rom_romentry63_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY63(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY63(a) "CST_CWX_ROM_ROMENTRY63"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY63(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY63(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry64
 *
 * CST Cw Rom Romentry64 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry64
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry64_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry64_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry64 cavm_cst_cwx_rom_romentry64_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY64(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY64(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000100ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000100ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000100ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000100ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY64", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY64(a) cavm_cst_cwx_rom_romentry64_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY64(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY64(a) "CST_CWX_ROM_ROMENTRY64"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY64(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY64(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry65
 *
 * CST Cw Rom Romentry65 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry65
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry65_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry65_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry65 cavm_cst_cwx_rom_romentry65_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY65(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY65(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000104ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000104ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000104ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000104ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY65", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY65(a) cavm_cst_cwx_rom_romentry65_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY65(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY65(a) "CST_CWX_ROM_ROMENTRY65"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY65(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY65(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry66
 *
 * CST Cw Rom Romentry66 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry66
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry66_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry66_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry66 cavm_cst_cwx_rom_romentry66_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY66(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY66(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000108ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000108ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000108ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000108ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY66", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY66(a) cavm_cst_cwx_rom_romentry66_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY66(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY66(a) "CST_CWX_ROM_ROMENTRY66"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY66(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY66(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry67
 *
 * CST Cw Rom Romentry67 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry67
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry67_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry67_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry67 cavm_cst_cwx_rom_romentry67_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY67(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY67(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400010cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400010cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400010cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400010cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY67", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY67(a) cavm_cst_cwx_rom_romentry67_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY67(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY67(a) "CST_CWX_ROM_ROMENTRY67"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY67(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY67(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry68
 *
 * CST Cw Rom Romentry68 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry68
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry68_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry68_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry68 cavm_cst_cwx_rom_romentry68_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY68(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY68(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000110ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000110ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000110ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000110ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY68", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY68(a) cavm_cst_cwx_rom_romentry68_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY68(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY68(a) "CST_CWX_ROM_ROMENTRY68"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY68(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY68(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry69
 *
 * CST Cw Rom Romentry69 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry69
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry69_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry69_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry69 cavm_cst_cwx_rom_romentry69_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY69(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY69(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000114ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000114ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000114ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000114ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY69", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY69(a) cavm_cst_cwx_rom_romentry69_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY69(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY69(a) "CST_CWX_ROM_ROMENTRY69"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY69(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY69(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry7
 *
 * CST Cw Rom Romentry7 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry7
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry7_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry7_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry7 cavm_cst_cwx_rom_romentry7_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY7(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY7(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400001cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400001cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400001cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400001cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY7", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY7(a) cavm_cst_cwx_rom_romentry7_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY7(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY7(a) "CST_CWX_ROM_ROMENTRY7"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY7(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY7(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry70
 *
 * CST Cw Rom Romentry70 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry70
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry70_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry70_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry70 cavm_cst_cwx_rom_romentry70_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY70(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY70(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000118ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000118ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000118ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000118ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY70", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY70(a) cavm_cst_cwx_rom_romentry70_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY70(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY70(a) "CST_CWX_ROM_ROMENTRY70"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY70(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY70(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry71
 *
 * CST Cw Rom Romentry71 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry71
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry71_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry71_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry71 cavm_cst_cwx_rom_romentry71_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY71(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY71(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400011cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400011cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400011cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400011cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY71", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY71(a) cavm_cst_cwx_rom_romentry71_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY71(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY71(a) "CST_CWX_ROM_ROMENTRY71"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY71(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY71(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry72
 *
 * CST Cw Rom Romentry72 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry72
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry72_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry72_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry72 cavm_cst_cwx_rom_romentry72_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY72(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY72(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000120ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000120ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000120ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000120ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY72", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY72(a) cavm_cst_cwx_rom_romentry72_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY72(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY72(a) "CST_CWX_ROM_ROMENTRY72"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY72(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY72(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry73
 *
 * CST Cw Rom Romentry73 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry73
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry73_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry73_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry73 cavm_cst_cwx_rom_romentry73_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY73(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY73(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000124ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000124ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000124ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000124ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY73", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY73(a) cavm_cst_cwx_rom_romentry73_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY73(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY73(a) "CST_CWX_ROM_ROMENTRY73"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY73(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY73(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry74
 *
 * CST Cw Rom Romentry74 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry74
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry74_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry74_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry74 cavm_cst_cwx_rom_romentry74_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY74(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY74(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000128ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000128ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000128ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000128ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY74", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY74(a) cavm_cst_cwx_rom_romentry74_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY74(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY74(a) "CST_CWX_ROM_ROMENTRY74"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY74(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY74(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry75
 *
 * CST Cw Rom Romentry75 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry75
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry75_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry75_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry75 cavm_cst_cwx_rom_romentry75_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY75(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY75(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400012cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400012cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400012cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400012cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY75", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY75(a) cavm_cst_cwx_rom_romentry75_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY75(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY75(a) "CST_CWX_ROM_ROMENTRY75"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY75(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY75(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry76
 *
 * CST Cw Rom Romentry76 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry76
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry76_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry76_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry76 cavm_cst_cwx_rom_romentry76_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY76(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY76(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000130ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000130ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000130ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000130ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY76", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY76(a) cavm_cst_cwx_rom_romentry76_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY76(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY76(a) "CST_CWX_ROM_ROMENTRY76"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY76(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY76(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry77
 *
 * CST Cw Rom Romentry77 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry77
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry77_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry77_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry77 cavm_cst_cwx_rom_romentry77_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY77(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY77(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000134ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000134ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000134ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000134ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY77", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY77(a) cavm_cst_cwx_rom_romentry77_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY77(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY77(a) "CST_CWX_ROM_ROMENTRY77"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY77(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY77(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry78
 *
 * CST Cw Rom Romentry78 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry78
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry78_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry78_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry78 cavm_cst_cwx_rom_romentry78_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY78(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY78(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000138ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000138ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000138ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000138ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY78", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY78(a) cavm_cst_cwx_rom_romentry78_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY78(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY78(a) "CST_CWX_ROM_ROMENTRY78"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY78(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY78(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry79
 *
 * CST Cw Rom Romentry79 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry79
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry79_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry79_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry79 cavm_cst_cwx_rom_romentry79_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY79(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY79(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400013cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400013cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400013cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400013cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY79", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY79(a) cavm_cst_cwx_rom_romentry79_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY79(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY79(a) "CST_CWX_ROM_ROMENTRY79"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY79(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY79(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry8
 *
 * CST Cw Rom Romentry8 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry8
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry8_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry8_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry8 cavm_cst_cwx_rom_romentry8_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY8(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY8(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000020ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000020ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000020ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000020ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY8", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY8(a) cavm_cst_cwx_rom_romentry8_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY8(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY8(a) "CST_CWX_ROM_ROMENTRY8"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY8(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY8(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry80
 *
 * CST Cw Rom Romentry80 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry80
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry80_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry80_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry80 cavm_cst_cwx_rom_romentry80_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY80(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY80(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000140ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000140ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000140ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000140ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY80", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY80(a) cavm_cst_cwx_rom_romentry80_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY80(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY80(a) "CST_CWX_ROM_ROMENTRY80"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY80(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY80(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry81
 *
 * CST Cw Rom Romentry81 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry81
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry81_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry81_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry81 cavm_cst_cwx_rom_romentry81_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY81(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY81(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000144ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000144ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000144ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000144ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY81", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY81(a) cavm_cst_cwx_rom_romentry81_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY81(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY81(a) "CST_CWX_ROM_ROMENTRY81"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY81(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY81(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry82
 *
 * CST Cw Rom Romentry82 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry82
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry82_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry82_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry82 cavm_cst_cwx_rom_romentry82_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY82(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY82(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000148ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000148ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000148ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000148ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY82", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY82(a) cavm_cst_cwx_rom_romentry82_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY82(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY82(a) "CST_CWX_ROM_ROMENTRY82"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY82(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY82(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry83
 *
 * CST Cw Rom Romentry83 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry83
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry83_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry83_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry83 cavm_cst_cwx_rom_romentry83_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY83(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY83(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400014cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400014cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400014cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400014cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY83", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY83(a) cavm_cst_cwx_rom_romentry83_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY83(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY83(a) "CST_CWX_ROM_ROMENTRY83"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY83(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY83(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry84
 *
 * CST Cw Rom Romentry84 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry84
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry84_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry84_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry84 cavm_cst_cwx_rom_romentry84_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY84(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY84(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000150ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000150ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000150ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000150ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY84", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY84(a) cavm_cst_cwx_rom_romentry84_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY84(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY84(a) "CST_CWX_ROM_ROMENTRY84"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY84(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY84(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry85
 *
 * CST Cw Rom Romentry85 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry85
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry85_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry85_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry85 cavm_cst_cwx_rom_romentry85_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY85(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY85(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000154ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000154ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000154ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000154ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY85", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY85(a) cavm_cst_cwx_rom_romentry85_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY85(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY85(a) "CST_CWX_ROM_ROMENTRY85"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY85(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY85(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry86
 *
 * CST Cw Rom Romentry86 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry86
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry86_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry86_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry86 cavm_cst_cwx_rom_romentry86_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY86(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY86(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000158ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000158ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000158ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000158ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY86", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY86(a) cavm_cst_cwx_rom_romentry86_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY86(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY86(a) "CST_CWX_ROM_ROMENTRY86"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY86(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY86(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry87
 *
 * CST Cw Rom Romentry87 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry87
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry87_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry87_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry87 cavm_cst_cwx_rom_romentry87_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY87(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY87(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400015cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400015cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400015cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400015cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY87", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY87(a) cavm_cst_cwx_rom_romentry87_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY87(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY87(a) "CST_CWX_ROM_ROMENTRY87"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY87(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY87(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry88
 *
 * CST Cw Rom Romentry88 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry88
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry88_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry88_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry88 cavm_cst_cwx_rom_romentry88_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY88(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY88(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000160ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000160ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000160ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000160ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY88", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY88(a) cavm_cst_cwx_rom_romentry88_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY88(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY88(a) "CST_CWX_ROM_ROMENTRY88"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY88(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY88(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry89
 *
 * CST Cw Rom Romentry89 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry89
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry89_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry89_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry89 cavm_cst_cwx_rom_romentry89_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY89(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY89(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000164ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000164ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000164ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000164ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY89", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY89(a) cavm_cst_cwx_rom_romentry89_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY89(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY89(a) "CST_CWX_ROM_ROMENTRY89"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY89(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY89(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry9
 *
 * CST Cw Rom Romentry9 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry9
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry9_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry9_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry9 cavm_cst_cwx_rom_romentry9_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY9(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY9(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000024ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000024ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000024ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000024ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY9", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY9(a) cavm_cst_cwx_rom_romentry9_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY9(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY9(a) "CST_CWX_ROM_ROMENTRY9"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY9(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY9(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry90
 *
 * CST Cw Rom Romentry90 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry90
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry90_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry90_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry90 cavm_cst_cwx_rom_romentry90_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY90(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY90(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000168ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000168ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000168ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000168ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY90", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY90(a) cavm_cst_cwx_rom_romentry90_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY90(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY90(a) "CST_CWX_ROM_ROMENTRY90"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY90(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY90(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry91
 *
 * CST Cw Rom Romentry91 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry91
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry91_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry91_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry91 cavm_cst_cwx_rom_romentry91_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY91(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY91(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400016cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400016cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400016cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400016cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY91", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY91(a) cavm_cst_cwx_rom_romentry91_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY91(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY91(a) "CST_CWX_ROM_ROMENTRY91"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY91(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY91(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry92
 *
 * CST Cw Rom Romentry92 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry92
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry92_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry92_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry92 cavm_cst_cwx_rom_romentry92_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY92(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY92(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000170ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000170ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000170ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000170ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY92", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY92(a) cavm_cst_cwx_rom_romentry92_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY92(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY92(a) "CST_CWX_ROM_ROMENTRY92"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY92(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY92(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry93
 *
 * CST Cw Rom Romentry93 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry93
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry93_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry93_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry93 cavm_cst_cwx_rom_romentry93_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY93(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY93(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000174ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000174ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000174ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000174ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY93", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY93(a) cavm_cst_cwx_rom_romentry93_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY93(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY93(a) "CST_CWX_ROM_ROMENTRY93"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY93(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY93(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry94
 *
 * CST Cw Rom Romentry94 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry94
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry94_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry94_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry94 cavm_cst_cwx_rom_romentry94_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY94(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY94(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000178ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000178ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000178ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000178ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY94", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY94(a) cavm_cst_cwx_rom_romentry94_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY94(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY94(a) "CST_CWX_ROM_ROMENTRY94"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY94(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY94(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry95
 *
 * CST Cw Rom Romentry95 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry95
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry95_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry95_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry95 cavm_cst_cwx_rom_romentry95_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY95(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY95(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400017cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400017cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400017cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400017cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY95", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY95(a) cavm_cst_cwx_rom_romentry95_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY95(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY95(a) "CST_CWX_ROM_ROMENTRY95"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY95(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY95(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry96
 *
 * CST Cw Rom Romentry96 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry96
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry96_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry96_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry96 cavm_cst_cwx_rom_romentry96_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY96(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY96(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000180ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000180ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000180ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000180ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY96", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY96(a) cavm_cst_cwx_rom_romentry96_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY96(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY96(a) "CST_CWX_ROM_ROMENTRY96"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY96(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY96(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry97
 *
 * CST Cw Rom Romentry97 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry97
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry97_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry97_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry97 cavm_cst_cwx_rom_romentry97_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY97(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY97(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000184ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000184ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000184ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000184ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY97", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY97(a) cavm_cst_cwx_rom_romentry97_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY97(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY97(a) "CST_CWX_ROM_ROMENTRY97"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY97(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY97(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry98
 *
 * CST Cw Rom Romentry98 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry98
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry98_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry98_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry98 cavm_cst_cwx_rom_romentry98_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY98(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY98(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a004000188ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a004000188ll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a004000188ll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a004000188ll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY98", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY98(a) cavm_cst_cwx_rom_romentry98_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY98(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY98(a) "CST_CWX_ROM_ROMENTRY98"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY98(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY98(a) (a),-1,-1,-1

/**
 * Register (NCB32b) cst_cw#_rom_romentry99
 *
 * CST Cw Rom Romentry99 Register
 * Each register contains a descripter of a CoreSight component in the system. All ROM
 * table entries conform to the same format.
 */
union cavm_cst_cwx_rom_romentry99
{
    uint32_t u;
    struct cavm_cst_cwx_rom_romentry99_s
    {
#if __BYTE_ORDER == __BIG_ENDIAN /* Word 0 - Big Endian */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
#else /* Word 0 - Little Endian */
        uint32_t present               : 2;  /**< [  1:  0](RO) Indicates whether the ROM table entry is present. */
        uint32_t power_domain_id_valid : 1;  /**< [  2:  2](RO) Indicates whether there is a power domain ID specified in the ROM table entry. */
        uint32_t sbz_0                 : 1;  /**< [  3:  3](RO) Software should write the field as all 0s. */
        uint32_t power_domain_id       : 5;  /**< [  8:  4](RO) Indicates the power domain ID of the component. Only valid if bit 2 is set. If
                                                                 bit 2 is clear then this field has a value of 0. Possible values are 0 to 31,
                                                                 representing the 32 DBGPWRUPREQ/ACK interface pins of the component. */
        uint32_t sbz_1                 : 3;  /**< [ 11:  9](RO) Software should write the field as all 0s. */
        uint32_t base_addr             : 20; /**< [ 31: 12](RO) Base address of component. */
#endif /* Word 0 - End */
    } s;
    /* struct cavm_cst_cwx_rom_romentry99_s cn; */
};
typedef union cavm_cst_cwx_rom_romentry99 cavm_cst_cwx_rom_romentry99_t;

static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY99(uint64_t a) __attribute__ ((pure, always_inline));
static inline uint64_t CAVM_CST_CWX_ROM_ROMENTRY99(uint64_t a)
{
    if (cavm_is_model(OCTEONTX_CN10KA) && (a<=23))
        return 0x87a00400018cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CN10KB) && (a<=7))
        return 0x87a00400018cll + 0x100000ll * ((a) & 0x7);
    if (cavm_is_model(OCTEONTX_CNF10KA) && (a<=17))
        return 0x87a00400018cll + 0x100000ll * ((a) & 0x1f);
    if (cavm_is_model(OCTEONTX_CNF10KB) && (a<=11))
        return 0x87a00400018cll + 0x100000ll * ((a) & 0xf);
    __cavm_csr_fatal("CST_CWX_ROM_ROMENTRY99", 1, a, 0, 0, 0, 0, 0);
}

#define typedef_CAVM_CST_CWX_ROM_ROMENTRY99(a) cavm_cst_cwx_rom_romentry99_t
#define bustype_CAVM_CST_CWX_ROM_ROMENTRY99(a) CSR_TYPE_NCB32b
#define basename_CAVM_CST_CWX_ROM_ROMENTRY99(a) "CST_CWX_ROM_ROMENTRY99"
#define busnum_CAVM_CST_CWX_ROM_ROMENTRY99(a) (a)
#define arguments_CAVM_CST_CWX_ROM_ROMENTRY99(a) (a),-1,-1,-1

#endif /* __CAVM_CSRS_CST_CW_ROM_H__ */
